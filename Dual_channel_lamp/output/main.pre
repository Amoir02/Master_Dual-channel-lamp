
# 1 "D:\Work\project\遥控+接收主程序\双信道接收2\src\main.c"

# 18 "D:\Work\file\PAN\PAN2416\编译器\CMS_IDE_V1.41.03_CRC_PANCHIP\data\include\cms89f228.h"
volatile unsigned char INDF @ 0x000;
volatile unsigned char TMR0 @ 0x001;
volatile unsigned char PCL @ 0x002;
volatile unsigned char STATUS @ 0x003;
volatile unsigned char FSR @ 0x004;
volatile unsigned char PORTA @ 0x005;
volatile unsigned char PORTB @ 0x006;
volatile unsigned char PORTC @ 0x007;

volatile unsigned char PORTE @ 0x009;
volatile unsigned char PCLATH @ 0x00A;
volatile unsigned char INTCON @ 0x00B;
volatile unsigned char PIR1 @ 0x00C;
volatile unsigned char PIR2 @ 0x00D;
volatile unsigned char TMR1L @ 0x00E;
volatile unsigned char TMR1H @ 0x00F;
volatile unsigned char T1CON @ 0x010;
volatile unsigned char TMR2 @ 0x011;
volatile unsigned char T2CON @ 0x012;
volatile unsigned char SSPBUF @ 0x013;
volatile unsigned char SSPCON @ 0x014;
volatile unsigned char CCPR1L @ 0x015;
volatile unsigned char CCPR1H @ 0x016;
volatile unsigned char CCP1CON @ 0x017;

# 47
volatile unsigned char CCPR2L @ 0x01B;
volatile unsigned char CCPR2H @ 0x01C;
volatile unsigned char CCP2CON @ 0x01D;
volatile unsigned char ADRESH @ 0x01E;
volatile unsigned char ADCON0 @ 0x01F;
volatile unsigned char OPTION_REG @ 0x081;
volatile unsigned char TRISA @ 0x085;
volatile unsigned char TRISB @ 0x086;
volatile unsigned char TRISC @ 0x087;
volatile unsigned char TRISE @ 0x089;
volatile unsigned char PIE1 @ 0x08C;
volatile unsigned char PIE2 @ 0x08D;

volatile unsigned char OSCCON @ 0x08F;
volatile unsigned char OSCTUNE @ 0x090;
volatile unsigned char SSPCON2 @ 0x091;
volatile unsigned char PR2 @ 0x092;
volatile unsigned char SSPADD @ 0x093;
volatile unsigned char SSPSTAT @ 0x094;
volatile unsigned char WPUB @ 0x095;
volatile unsigned char IOCB @ 0x096;

# 74
volatile unsigned char ADRESL @ 0x09E;
volatile unsigned char ADCON1 @ 0x09F;
volatile unsigned char WDTCON @ 0x105;




volatile unsigned char EEDAT @ 0x10C;
volatile unsigned char EEDATA @ 0x10C;
volatile unsigned char EEADR @ 0x10D;
volatile unsigned char EEADRL @ 0x10D;
volatile unsigned char EEDATH @ 0x10E;
volatile unsigned char EEADRH @ 0x10F;

volatile unsigned char TABLE_SPH @ 0x110;
volatile unsigned char TABLE_SPL @ 0x111;
volatile unsigned char TABLE_DATAH @ 0x112;

# 99
volatile unsigned char WPUE @ 0x11A;
volatile unsigned char OPA0CON @ 0x11C;
volatile unsigned char OPA0ADJ @ 0x11D;



volatile unsigned char ANSEL @ 0x188;
volatile unsigned char ANSELH @ 0x189;

volatile unsigned char EECON1 @ 0x18C;
volatile unsigned char EECON2 @ 0x18D;
volatile unsigned char WPUA @ 0x18E;
volatile unsigned char WPUC @ 0x18F;

volatile unsigned char LEDCON0 @ 0x190;
volatile unsigned char LEDCON1 @ 0x191;
volatile unsigned char LEDADD @ 0x192;
volatile unsigned char LEDDATA @ 0x193;
volatile unsigned char LCDCON0 @ 0x190;
volatile unsigned char LCDCON1 @ 0x191;
volatile unsigned char LCDADD @ 0x192;
volatile unsigned char LCDDATA @ 0x193;
volatile unsigned char SEGEN2 @ 0x194;
volatile unsigned char SEGEN1 @ 0x195;
volatile unsigned char SEGEN0 @ 0x196;
volatile unsigned char COMEN @ 0x197;



volatile bit CARRY @ ((unsigned)&STATUS*8)+0;
volatile bit DC @ ((unsigned)&STATUS*8)+1;
volatile bit ZERO @ ((unsigned)&STATUS*8)+2;
volatile bit PD @ ((unsigned)&STATUS*8)+3;
volatile bit TO @ ((unsigned)&STATUS*8)+4;
volatile bit IRP @ ((unsigned)&STATUS*8)+7;


volatile bit RA0 @ ((unsigned)&PORTA*8)+0;
volatile bit RA1 @ ((unsigned)&PORTA*8)+1;
volatile bit RA2 @ ((unsigned)&PORTA*8)+2;
volatile bit RA3 @ ((unsigned)&PORTA*8)+3;
volatile bit RA4 @ ((unsigned)&PORTA*8)+4;
volatile bit RA5 @ ((unsigned)&PORTA*8)+5;
volatile bit RA6 @ ((unsigned)&PORTA*8)+6;
volatile bit RA7 @ ((unsigned)&PORTA*8)+7;


volatile bit RB0 @ ((unsigned)&PORTB*8)+0;
volatile bit RB1 @ ((unsigned)&PORTB*8)+1;
volatile bit RB2 @ ((unsigned)&PORTB*8)+2;
volatile bit RB3 @ ((unsigned)&PORTB*8)+3;
volatile bit RB4 @ ((unsigned)&PORTB*8)+4;
volatile bit RB5 @ ((unsigned)&PORTB*8)+5;
volatile bit RB6 @ ((unsigned)&PORTB*8)+6;
volatile bit RB7 @ ((unsigned)&PORTB*8)+7;


volatile bit RC0 @ ((unsigned)&PORTC*8)+0;
volatile bit RC1 @ ((unsigned)&PORTC*8)+1;
volatile bit RC2 @ ((unsigned)&PORTC*8)+2;
volatile bit RC3 @ ((unsigned)&PORTC*8)+3;
volatile bit RC4 @ ((unsigned)&PORTC*8)+4;
volatile bit RC5 @ ((unsigned)&PORTC*8)+5;
volatile bit RC6 @ ((unsigned)&PORTC*8)+6;
volatile bit RC7 @ ((unsigned)&PORTC*8)+7;


volatile bit RE0 @ ((unsigned)&PORTE*8)+0;
volatile bit RE1 @ ((unsigned)&PORTE*8)+1;
volatile bit RE2 @ ((unsigned)&PORTE*8)+2;
volatile bit RE3 @ ((unsigned)&PORTE*8)+3;


volatile bit RBIF @ ((unsigned)&INTCON*8)+0;

volatile bit RABIF @ ((unsigned)&INTCON*8)+0;
volatile bit INTF @ ((unsigned)&INTCON*8)+1;
volatile bit T0IF @ ((unsigned)&INTCON*8)+2;
volatile bit RBIE @ ((unsigned)&INTCON*8)+3;

volatile bit RABIE @ ((unsigned)&INTCON*8)+3;
volatile bit INTE @ ((unsigned)&INTCON*8)+4;
volatile bit T0IE @ ((unsigned)&INTCON*8)+5;
volatile bit PEIE @ ((unsigned)&INTCON*8)+6;
volatile bit GIE @ ((unsigned)&INTCON*8)+7;


volatile bit TMR1IF @ ((unsigned)&PIR1*8)+0;
volatile bit TMR2IF @ ((unsigned)&PIR1*8)+1;
volatile bit CCP1IF @ ((unsigned)&PIR1*8)+2;
volatile bit SSPIF @ ((unsigned)&PIR1*8)+3;
volatile bit TXIF @ ((unsigned)&PIR1*8)+4;
volatile bit RCIF @ ((unsigned)&PIR1*8)+5;
volatile bit ADIF @ ((unsigned)&PIR1*8)+6;


volatile bit CCP2IF @ ((unsigned)&PIR2*8)+0;
volatile bit BCLIF @ ((unsigned)&PIR2*8)+3;
volatile bit EEIF @ ((unsigned)&PIR2*8)+4;
volatile bit C1IF @ ((unsigned)&PIR2*8)+5;
volatile bit C2IF @ ((unsigned)&PIR2*8)+6;


volatile bit TMR1ON @ ((unsigned)&T1CON*8)+0;
volatile bit TMR1CS @ ((unsigned)&T1CON*8)+1;
volatile bit T1SYNC @ ((unsigned)&T1CON*8)+2;
volatile bit T1OSCEN @ ((unsigned)&T1CON*8)+3;
volatile bit T1CKPS0 @ ((unsigned)&T1CON*8)+4;
volatile bit T1CKPS1 @ ((unsigned)&T1CON*8)+5;
volatile bit TMR1GE @ ((unsigned)&T1CON*8)+6;
volatile bit T1GINV @ ((unsigned)&T1CON*8)+7;


volatile bit T2CKPS0 @ ((unsigned)&T2CON*8)+0;
volatile bit T2CKPS1 @ ((unsigned)&T2CON*8)+1;
volatile bit TMR2ON @ ((unsigned)&T2CON*8)+2;
volatile bit TOUTPS0 @ ((unsigned)&T2CON*8)+3;
volatile bit TOUTPS1 @ ((unsigned)&T2CON*8)+4;
volatile bit TOUTPS2 @ ((unsigned)&T2CON*8)+5;
volatile bit TOUTPS3 @ ((unsigned)&T2CON*8)+6;


volatile bit SSPM0 @ ((unsigned)&SSPCON*8)+0;
volatile bit SSPM1 @ ((unsigned)&SSPCON*8)+1;
volatile bit SSPM2 @ ((unsigned)&SSPCON*8)+2;
volatile bit SSPM3 @ ((unsigned)&SSPCON*8)+3;
volatile bit CKP @ ((unsigned)&SSPCON*8)+4;
volatile bit SSPEN @ ((unsigned)&SSPCON*8)+5;
volatile bit SSPOV @ ((unsigned)&SSPCON*8)+6;
volatile bit WCOL @ ((unsigned)&SSPCON*8)+7;


volatile bit CCP1M0 @ ((unsigned)&CCP1CON*8)+0;
volatile bit CCP1M1 @ ((unsigned)&CCP1CON*8)+1;
volatile bit CCP1M2 @ ((unsigned)&CCP1CON*8)+2;
volatile bit CCP1M3 @ ((unsigned)&CCP1CON*8)+3;
volatile bit DC1B0 @ ((unsigned)&CCP1CON*8)+4;
volatile bit DC1B1 @ ((unsigned)&CCP1CON*8)+5;
volatile bit P1M0 @ ((unsigned)&CCP1CON*8)+6;
volatile bit P1M1 @ ((unsigned)&CCP1CON*8)+7;

# 251
volatile bit CCP2M0 @ ((unsigned)&CCP2CON*8)+0;
volatile bit CCP2M1 @ ((unsigned)&CCP2CON*8)+1;
volatile bit CCP2M2 @ ((unsigned)&CCP2CON*8)+2;
volatile bit CCP2M3 @ ((unsigned)&CCP2CON*8)+3;
volatile bit DC2B0 @ ((unsigned)&CCP2CON*8)+4;
volatile bit DC2B1 @ ((unsigned)&CCP2CON*8)+5;
volatile bit CCP2IN0 @ ((unsigned)&CCP2CON*8)+6;
volatile bit CCP2IN1 @ ((unsigned)&CCP2CON*8)+7;


volatile bit ADON @ ((unsigned)&ADCON0*8)+0;
volatile bit GODONE @ ((unsigned)&ADCON0*8)+1;
volatile bit CHS0 @ ((unsigned)&ADCON0*8)+2;
volatile bit CHS1 @ ((unsigned)&ADCON0*8)+3;
volatile bit CHS2 @ ((unsigned)&ADCON0*8)+4;
volatile bit CHS3 @ ((unsigned)&ADCON0*8)+5;
volatile bit ADCS0 @ ((unsigned)&ADCON0*8)+6;
volatile bit ADCS1 @ ((unsigned)&ADCON0*8)+7;


volatile bit PS0 @ ((unsigned)&OPTION_REG*8)+0;
volatile bit PS1 @ ((unsigned)&OPTION_REG*8)+1;
volatile bit PS2 @ ((unsigned)&OPTION_REG*8)+2;
volatile bit PSA @ ((unsigned)&OPTION_REG*8)+3;
volatile bit T0SE @ ((unsigned)&OPTION_REG*8)+4;
volatile bit T0CS @ ((unsigned)&OPTION_REG*8)+5;
volatile bit INTEDG @ ((unsigned)&OPTION_REG*8)+6;
volatile bit RBPU @ ((unsigned)&OPTION_REG*8)+7;

volatile bit RABPU @ ((unsigned)&OPTION_REG*8)+7;


volatile bit TRISA0 @ ((unsigned)&TRISA*8)+0;
volatile bit TRISA1 @ ((unsigned)&TRISA*8)+1;
volatile bit TRISA2 @ ((unsigned)&TRISA*8)+2;
volatile bit TRISA3 @ ((unsigned)&TRISA*8)+3;
volatile bit TRISA4 @ ((unsigned)&TRISA*8)+4;
volatile bit TRISA5 @ ((unsigned)&TRISA*8)+5;
volatile bit TRISA6 @ ((unsigned)&TRISA*8)+6;
volatile bit TRISA7 @ ((unsigned)&TRISA*8)+7;


volatile bit TRISB0 @ ((unsigned)&TRISB*8)+0;
volatile bit TRISB1 @ ((unsigned)&TRISB*8)+1;
volatile bit TRISB2 @ ((unsigned)&TRISB*8)+2;
volatile bit TRISB3 @ ((unsigned)&TRISB*8)+3;
volatile bit TRISB4 @ ((unsigned)&TRISB*8)+4;
volatile bit TRISB5 @ ((unsigned)&TRISB*8)+5;
volatile bit TRISB6 @ ((unsigned)&TRISB*8)+6;
volatile bit TRISB7 @ ((unsigned)&TRISB*8)+7;


volatile bit TRISC0 @ ((unsigned)&TRISC*8)+0;
volatile bit TRISC1 @ ((unsigned)&TRISC*8)+1;
volatile bit TRISC2 @ ((unsigned)&TRISC*8)+2;
volatile bit TRISC3 @ ((unsigned)&TRISC*8)+3;
volatile bit TRISC4 @ ((unsigned)&TRISC*8)+4;
volatile bit TRISC5 @ ((unsigned)&TRISC*8)+5;
volatile bit TRISC6 @ ((unsigned)&TRISC*8)+6;
volatile bit TRISC7 @ ((unsigned)&TRISC*8)+7;



volatile bit TRISE0 @ ((unsigned)&TRISE*8)+0;
volatile bit TRISE1 @ ((unsigned)&TRISE*8)+1;
volatile bit TRISE2 @ ((unsigned)&TRISE*8)+2;
volatile bit TRISE3 @ ((unsigned)&TRISE*8)+3;


volatile bit TMR1IE @ ((unsigned)&PIE1*8)+0;
volatile bit TMR2IE @ ((unsigned)&PIE1*8)+1;
volatile bit CCP1IE @ ((unsigned)&PIE1*8)+2;
volatile bit SSPIE @ ((unsigned)&PIE1*8)+3;
volatile bit TXIE @ ((unsigned)&PIE1*8)+4;
volatile bit RCIE @ ((unsigned)&PIE1*8)+5;
volatile bit ADIE @ ((unsigned)&PIE1*8)+6;


volatile bit CCP2IE @ ((unsigned)&PIE2*8)+0;
volatile bit BCLIE @ ((unsigned)&PIE2*8)+3;
volatile bit EEIE @ ((unsigned)&PIE2*8)+4;
volatile bit C1IE @ ((unsigned)&PIE2*8)+5;
volatile bit C2IE @ ((unsigned)&PIE2*8)+6;



volatile bit SCS @ ((unsigned)&OSCCON*8)+0;
volatile bit IRCF0 @ ((unsigned)&OSCCON*8)+4;
volatile bit IRCF1 @ ((unsigned)&OSCCON*8)+5;
volatile bit IRCF2 @ ((unsigned)&OSCCON*8)+6;


volatile bit TUN0 @ ((unsigned)&OSCTUNE*8)+0;
volatile bit TUN1 @ ((unsigned)&OSCTUNE*8)+1;
volatile bit TUN2 @ ((unsigned)&OSCTUNE*8)+2;
volatile bit TUN3 @ ((unsigned)&OSCTUNE*8)+3;
volatile bit TUN4 @ ((unsigned)&OSCTUNE*8)+4;


volatile bit SEN @ ((unsigned)&SSPCON2*8)+0;
volatile bit RSEN @ ((unsigned)&SSPCON2*8)+1;
volatile bit PEN @ ((unsigned)&SSPCON2*8)+2;
volatile bit RCEN @ ((unsigned)&SSPCON2*8)+3;
volatile bit ACKEN @ ((unsigned)&SSPCON2*8)+4;
volatile bit ACKDT @ ((unsigned)&SSPCON2*8)+5;
volatile bit ACKSTAT @ ((unsigned)&SSPCON2*8)+6;
volatile bit GCEN @ ((unsigned)&SSPCON2*8)+7;


volatile bit BF @ ((unsigned)&SSPSTAT*8)+0;
volatile bit UA @ ((unsigned)&SSPSTAT*8)+1;
volatile bit RW @ ((unsigned)&SSPSTAT*8)+2;
volatile bit START @ ((unsigned)&SSPSTAT*8)+3;
volatile bit STOP @ ((unsigned)&SSPSTAT*8)+4;
volatile bit DA @ ((unsigned)&SSPSTAT*8)+5;
volatile bit CKE @ ((unsigned)&SSPSTAT*8)+6;
volatile bit SMP @ ((unsigned)&SSPSTAT*8)+7;


volatile bit WPUA0 @ ((unsigned)&WPUA*8)+0;
volatile bit WPUA1 @ ((unsigned)&WPUA*8)+1;
volatile bit WPUA2 @ ((unsigned)&WPUA*8)+2;
volatile bit WPUA3 @ ((unsigned)&WPUA*8)+3;
volatile bit WPUA4 @ ((unsigned)&WPUA*8)+4;
volatile bit WPUA5 @ ((unsigned)&WPUA*8)+5;
volatile bit WPUA6 @ ((unsigned)&WPUA*8)+6;
volatile bit WPUA7 @ ((unsigned)&WPUA*8)+7;


volatile bit WPUB0 @ ((unsigned)&WPUB*8)+0;
volatile bit WPUB1 @ ((unsigned)&WPUB*8)+1;
volatile bit WPUB2 @ ((unsigned)&WPUB*8)+2;
volatile bit WPUB3 @ ((unsigned)&WPUB*8)+3;
volatile bit WPUB4 @ ((unsigned)&WPUB*8)+4;
volatile bit WPUB5 @ ((unsigned)&WPUB*8)+5;
volatile bit WPUB6 @ ((unsigned)&WPUB*8)+6;
volatile bit WPUB7 @ ((unsigned)&WPUB*8)+7;


volatile bit WPUC0 @ ((unsigned)&WPUC*8)+0;
volatile bit WPUC1 @ ((unsigned)&WPUC*8)+1;
volatile bit WPUC2 @ ((unsigned)&WPUC*8)+2;
volatile bit WPUC3 @ ((unsigned)&WPUC*8)+3;
volatile bit WPUC4 @ ((unsigned)&WPUC*8)+4;
volatile bit WPUC5 @ ((unsigned)&WPUC*8)+5;
volatile bit WPUC6 @ ((unsigned)&WPUC*8)+6;
volatile bit WPUC7 @ ((unsigned)&WPUC*8)+7;


volatile bit WPUE0 @ ((unsigned)&WPUE*8)+0;
volatile bit WPUE1 @ ((unsigned)&WPUE*8)+1;
volatile bit WPUE2 @ ((unsigned)&WPUE*8)+2;
volatile bit WPUE3 @ ((unsigned)&WPUE*8)+3;


volatile bit IOCB0 @ ((unsigned)&IOCB*8)+0;
volatile bit IOCB1 @ ((unsigned)&IOCB*8)+1;
volatile bit IOCB2 @ ((unsigned)&IOCB*8)+2;
volatile bit IOCB3 @ ((unsigned)&IOCB*8)+3;
volatile bit IOCB4 @ ((unsigned)&IOCB*8)+4;
volatile bit IOCB5 @ ((unsigned)&IOCB*8)+5;
volatile bit IOCB6 @ ((unsigned)&IOCB*8)+6;
volatile bit IOCB7 @ ((unsigned)&IOCB*8)+7;

# 429
volatile bit ADFM @ ((unsigned)&ADCON1*8)+7;


volatile bit SWDTEN @ ((unsigned)&WDTCON*8)+0;



volatile bit ANS0 @ ((unsigned)&ANSEL*8)+0;
volatile bit ANS1 @ ((unsigned)&ANSEL*8)+1;
volatile bit ANS2 @ ((unsigned)&ANSEL*8)+2;
volatile bit ANS3 @ ((unsigned)&ANSEL*8)+3;
volatile bit ANS4 @ ((unsigned)&ANSEL*8)+4;
volatile bit ANS5 @ ((unsigned)&ANSEL*8)+5;
volatile bit ANS6 @ ((unsigned)&ANSEL*8)+6;
volatile bit ANS7 @ ((unsigned)&ANSEL*8)+7;


volatile bit ANS8 @ ((unsigned)&ANSELH*8)+0;
volatile bit ANS9 @ ((unsigned)&ANSELH*8)+1;
volatile bit ANS10 @ ((unsigned)&ANSELH*8)+2;
volatile bit ANS11 @ ((unsigned)&ANSELH*8)+3;
volatile bit ANS12 @ ((unsigned)&ANSELH*8)+4;
volatile bit ANS13 @ ((unsigned)&ANSELH*8)+5;


volatile bit RD @ ((unsigned)&EECON1*8)+0;
volatile bit WR @ ((unsigned)&EECON1*8)+1;
volatile bit WREN @ ((unsigned)&EECON1*8)+2;
volatile bit WRERR @ ((unsigned)&EECON1*8)+3;
volatile bit EEPGD @ ((unsigned)&EECON1*8)+7;


# 117 "D:\Work\file\PAN\PAN2416\编译器\CMS_IDE_V1.41.03_CRC_PANCHIP\data\include\cms.h"
#pragma inline(_nop)
extern void _nop(void);

# 144
extern unsigned int flash_read(unsigned short addr);


# 217
#pragma inline(_delay)
extern void _delay(unsigned long);

# 17 "D:\Work\project\遥控+接收主程序\双信道接收2\src\system.h"
typedef enum{
CPU_FREQUENCY_EXTERNAL = 0x00,
CPU_FREQUENCY_31K = 0x01,
CPU_FREQUENCY_125K = 0x11,
CPU_FREQUENCY_250K = 0x21,
CPU_FREQUENCY_500K = 0x31,
CPU_FREQUENCY_1M = 0x41,
CPU_FREQUENCY_2M = 0x51,
CPU_FREQUENCY_4M = 0x61,
CPU_FREQUENCY_8M = 0x71
}CPU_FREQUENCY_e;

typedef enum{
PORTB_CHANGE_ISR_ENABLE = 0x80,
INT0_ISR_ENABLE = 0x10,
TIMER0_ISR_ENABLE = 0x20,
TIMER1_ISR_ENABLE = 0x01,
TIMER2_ISR_ENABLE = 0x02,
ADC_ISR_ENABLE = 0x40,
}INT_ENABLE_FLAG_e;

typedef enum{
PORTB_CHANGE_ISR_TOUCH = 0x01,
INT0_ISR_TOUCH = 0x02,
TIMER0_ISR_TOUCH = 0x04,
TIMER1_ISR_TOUCH = 0x01,
TIMER2_ISR_TOUCH = 0x02,
ADC_ISR_TOUCH = 0x40,
}INT_TOUCH_FLAG_e;

extern void Interrupt_init(void);
extern void soft_delay_ms(unsigned int ms);
extern void system_set_CPU_frequency(CPU_FREQUENCY_e CPU_Frequency);
extern void clear_interrupt_flag(void);
extern void system_to_sleep(void);
extern void Enable_Interrupt(void);
extern void Disable_Interrupt(void);

# 4 "D:\Work\project\遥控+接收主程序\双信道接收2\src\WDT.h"
typedef enum{
WDT_DIVIDE_RATIO_1 = 8+0,
WDT_DIVIDE_RATIO_2 = 8+1,
WDT_DIVIDE_RATIO_4 = 8+2,
WDT_DIVIDE_RATIO_8 = 8+3,
WDT_DIVIDE_RATIO_16 = 8+4,
WDT_DIVIDE_RATIO_32 = 8+5,
WDT_DIVIDE_RATIO_64 = 8+6,
WDT_DIVIDE_RATIO_128 = 8+7,
}WDT_DIVIDE_RATIO_e;


extern void WDT_enable(WDT_DIVIDE_RATIO_e WDT_DIVIDE_RATIO);
extern void WDT_clear(void);
extern void WDT_disable(void);

# 79 "D:\Work\project\遥控+接收主程序\双信道接收2\src\rf297L.h"
typedef enum{
UNKNOW_STATUS,
SENT_SUCCESS,
ACK_PAYLOAD_SENT_SUCCESS,
SENT_FAILURE,
}TX_RESULT_e;

extern unsigned char RF_ReadReg(unsigned char reg_addr);
extern void RF_WriteReg(unsigned char reg_addr, unsigned char write_data);
extern void RF_Write_Buff(unsigned char reg_addr,unsigned char *pBuff,unsigned char length);
extern void RF_Read_Buff(unsigned char reg_addr, unsigned char *pBuff, unsigned char length);
extern void RF_Set_RxMode(void);
extern unsigned char RF_GetStatus(void);
extern void RF_ClearStatus(void);
extern void RF_ClearFIFO(void);
extern void RF_SetChannel(unsigned char Channel);
extern void RF_TxData(unsigned char *payload_buff,unsigned char length);
extern unsigned char RF_ENHANCE_TxData(unsigned char *payload_buff,unsigned char length,unsigned char *postback_buff);
extern unsigned char RF_RxData(unsigned char *payload_buff,unsigned char length);
extern unsigned char RF_ENHANCE_RxData(unsigned char *payload_buff,unsigned char length,unsigned char *postback_buff);

extern void RF_Init(void);
extern TX_RESULT_e RF_get_TX_result(void);
void RF_ADDSSet(unsigned char *Buf);

void RF_Init3(void);
void RF_Init4(void);
void RF_Set_RxMode1(void);

# 27 "D:\Work\project\遥控+接收主程序\双信道接收2\src\timer1.h"
typedef enum{
TIMER1_DIV_1 = 0x00,
TIMER1_DIV_2 = 0x10,
TIMER1_DIV_4 = 0x20,
TIMER1_DIV_8 = 0x30,
}TIMER1_DIVIDER_e;

# 38
extern void Timer1_Init(TIMER1_DIVIDER_e TIMER_DIVIDER);

# 46
extern void Timer1_start(unsigned int T_nums, unsigned char Timer1_ISR_execution_total_time);

extern void Timer1_stop(void);
extern void TIMER1_ISR(void);

# 7 "D:\Work\project\遥控+接收主程序\双信道接收2\src\PORTB_interrupt.h"
extern void PORTB_INT_Init(unsigned char icob_value);

# 12
extern void PORTB_INT_Disable(unsigned char icob_value);


extern void PORTB_CHANGE_ISR(void);

# 7 "D:\Work\project\遥控+接收主程序\双信道接收2\src\cUART.h"
void cUARTInit(void);
void delay_UA(unsigned char DT);
void UARTSend(unsigned char SD);

# 9 "D:\Work\project\遥控+接收主程序\双信道接收2\src\24lc02.h"
unsigned char EEPROM_Init(unsigned char SPD_I2C);
unsigned char EEPROM_SendByte(unsigned char REGadds,unsigned char Wdat);
unsigned char EEPROM_ReceByte(unsigned char REGadds,unsigned char *Rdat);

unsigned char EEPROM_CheckBusy(void);
void EP_GetRFAdd(unsigned char * OutP);
void EP_SetRFAdd(unsigned char * InP);

unsigned char EP_GetONOFFStep(void);
void EP_SetONOFFStep(unsigned char D);
unsigned char EP_IsADDCfg(void);
unsigned char EP_SetADDCfg(unsigned char ID);
void AT24C02_Write_Msg(unsigned char addr ,unsigned char *data,unsigned char len);
void AT24C02_Read_Msg(unsigned char addr,unsigned char *data,unsigned char len);

# 58 "D:\Work\project\遥控+接收主程序\双信道接收2\src\Key.h"
void Chg_Init(void);
void Chg_Running(void);
void Key_Handle(unsigned char *buf);
void Key_HandRunning(void);
void LED_ALLOFF(void);
void Pair_LED(void);

# 37 "D:\Work\project\遥控+接收主程序\双信道接收2\src\Buffer.H"
struct RunParam
{
unsigned char GoalVal [2];
unsigned char GoalValing [2];
unsigned char GapTime [2];
unsigned char TallyTimeing [2];
unsigned char pixel [2];
unsigned char RunSAT [2];
unsigned char RunEN [2];
unsigned char RunFinish [2];
};

# 55
void BufRuning(void);

# 63
void BufSetRun(unsigned char BufNo,unsigned char Deg ,unsigned char SPD,unsigned char PIX);

# 70
void SetRunEn(unsigned char BufNo,unsigned char RunEn,int MID);

void SetRunONOFF(unsigned char BufNo,unsigned char RunEn);
unsigned char GerBuff_RunSAT (unsigned char BufNo);

# 11 "D:\Work\project\遥控+接收主程序\双信道接收2\src\PWM.h"
typedef enum{
PWM_DIV_1 = 0x00,
PWM_DIV_4 = 0x01,
PWM_DIV_16 = 0x02,
}PWM_DIV_e;

# 23
extern void CCPX_Init(PWM_DIV_e PWM_DIV,unsigned char T_nums);

# 31
extern void CCP1_set_duty_cycle(unsigned int duty_cycle);

# 39
extern void CCP2_set_duty_cycle(unsigned int duty_cycle);

# 82 "D:\Work\project\遥控+接收主程序\双信道接收2\src\recive.h"
struct BriCoTem
{
unsigned char Brightness;
unsigned char ColorTemp;
};


void recive_task(void);

# 7 "D:\Work\project\遥控+接收主程序\双信道接收2\src\userClock.h"
extern unsigned char clk_flag;

# 32
void getClock(void);

# 38 "D:\Work\project\遥控+接收主程序\双信道接收2\src\iic.h"
void IIC_Init1(void);
void IIC_START1(void);
void IIC_STOP1(void);
unsigned char IIC_Wait_ACK1(void);
void IIC_ACK1(void);
void IIC_NACK1(void);
void I2C_SendByte1(unsigned char Data);
unsigned int I2C_ReadByte1(unsigned char ack);

# 19 "D:\Work\project\遥控+接收主程序\双信道接收2\src\main.c"
unsigned short int Timecnt_3S=0;

unsigned short int SysRunTimeCnt=1;
unsigned char SysDingShiEn=0;

const char ack_buf[8]= {0};
extern unsigned char rf_buf[18];
unsigned char RF_ADDRESS[5]={0,0,0,0,0};
unsigned char RF_RxMark=0;

unsigned char DingShi=0;

extern unsigned char TX_ADDRESS_DEF[5];

unsigned char PWM_CH_LED1=0;
unsigned char PWM_CH_LED2=0;

unsigned char LEDR1_Vol=0;
unsigned char LEDR2_Vol=0;

unsigned char SysRunTime_3S=0;

extern unsigned char addr_buf[16];

extern struct BriCoTem BriCoTem_Value;
unsigned short int Timecnt_LEDTrun=0;
unsigned char TimeEN_LEDTrun=0;

extern unsigned int Time1s_cot;

void PWM_LED1(unsigned char PWM);
void PWM_LED2(unsigned char PWM);
void PWM_12SetVol(void);



void main()
{
unsigned char i = 0;
unsigned char j = 0;

system_set_CPU_frequency(CPU_FREQUENCY_8M);
soft_delay_ms(200);
asm("nop");
TRISC = 0x00;
TRISB = 0x00;
PORTC = 0x00;
PORTB = 0x00;

CCPX_Init(1,61);
CCP1_set_duty_cycle(0);
CCP2_set_duty_cycle(0);

soft_delay_ms(10);
i=EEPROM_Init(10);
soft_delay_ms(10);



i=EP_GetONOFFStep();
switch(i)
{
case 0: PWM_CH_LED1=250; PWM_CH_LED2=0; break;
case 1: PWM_CH_LED1=0; PWM_CH_LED2=250;break;
case 2: PWM_CH_LED1=250; PWM_CH_LED2=250;break;
case 3: PWM_CH_LED1=2; PWM_CH_LED2=2; break;
}
LEDR1_Vol=PWM_CH_LED1;
LEDR2_Vol=PWM_CH_LED2;
PWM_12SetVol();
if(++i>=4) i=0;

EP_SetONOFFStep(i);

IIC_Init1();
AT24C02_Read_Msg(30, addr_buf, 16);


RF_Init();
RF_Set_RxMode();
soft_delay_ms(30);
RF_ADDSSet(TX_ADDRESS_DEF);



SetRunEn(0,1,LEDR1_Vol);
SetRunEn(1,1,LEDR2_Vol);
Enable_Interrupt();

Timer1_Init(TIMER1_DIV_8);
Timer1_start(1000, 0);
Time1s_cot = 0;
WDT_enable(7);

BriCoTem_Value.Brightness =100;
BriCoTem_Value.ColorTemp = 50;

while(1)
{




if(TimeEN_LEDTrun==0 && (clk_flag & 0x01))
{
if(Timecnt_LEDTrun++>1700)
{
TimeEN_LEDTrun=1;
soft_delay_ms(1);
EP_SetONOFFStep(0);
WDT_clear();
}
}

if(SysRunTime_3S==0 && (clk_flag & 0x01))
{
if(Timecnt_3S++>3000)
{
SysRunTime_3S=1;

i=EP_IsADDCfg();
if(i)
{
EP_GetRFAdd(RF_ADDRESS);

soft_delay_ms(1);
RF_ADDSSet(RF_ADDRESS);
WDT_clear();
}
}
}

if((clk_flag & 0x10) && Time1s_cot==0)
{
if(j)
{
j = 0;
RF_Init4();
RF_Set_RxMode1();
}
else
{
j = 1;

RF_Init3();
RF_Set_RxMode();
}
}

if(j == 1)
{
if(RF_ENHANCE_RxData(rf_buf,8,ack_buf))
{

Key_Handle(rf_buf);
for(i=0;i<8;i++) rf_buf[i]=0; WDT_clear();
}
}
if(j == 0)
{
recive_task();
}
PWM_12SetVol();


getClock();
if((clk_flag & 0x01))
{
Key_HandRunning();

if(++DingShi > 99)
{
DingShi=0;

if(SysDingShiEn)
{
SysRunTimeCnt--;
if(SysRunTimeCnt==0)
{
SysDingShiEn=0;
SysRunTimeCnt=0;
LED_ALLOFF();
}
}
}
}

WDT_clear();
}

}

# 222
void PWM_LED1(unsigned char PWM)
{
PWM_CH_LED1=PWM;
}


void PWM_LED2(unsigned char PWM)
{
PWM_CH_LED2=PWM;
}


void PWM_12SetVol(void)
{
CCP1_set_duty_cycle(PWM_CH_LED2);
CCP2_set_duty_cycle(PWM_CH_LED1);
}

