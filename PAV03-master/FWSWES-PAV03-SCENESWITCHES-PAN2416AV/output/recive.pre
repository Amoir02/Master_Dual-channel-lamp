
# 1 "C:\item\pan2416\gitforpan2416\PAV03new\FWSWES-PAV03-SCENESWITCHES-PAN2416AV\src\recive.c"

# 18 "C:\item\pan2416\PAN2416\±‡“Î∆˜\CMS_ID~1.03_\data\include\cms89f228.h"
volatile unsigned char INDF @ 0x000;
volatile unsigned char TMR0 @ 0x001;
volatile unsigned char PCL @ 0x002;
volatile unsigned char STATUS @ 0x003;
volatile unsigned char FSR @ 0x004;
volatile unsigned char PORTA @ 0x005;
volatile unsigned char PORTB @ 0x006;
volatile unsigned char PORTC @ 0x007;

volatile unsigned char PORTE @ 0x009;
volatile unsigned char PCLATH @ 0x00A;
volatile unsigned char INTCON @ 0x00B;
volatile unsigned char PIR1 @ 0x00C;
volatile unsigned char PIR2 @ 0x00D;
volatile unsigned char TMR1L @ 0x00E;
volatile unsigned char TMR1H @ 0x00F;
volatile unsigned char T1CON @ 0x010;
volatile unsigned char TMR2 @ 0x011;
volatile unsigned char T2CON @ 0x012;
volatile unsigned char SSPBUF @ 0x013;
volatile unsigned char SSPCON @ 0x014;
volatile unsigned char CCPR1L @ 0x015;
volatile unsigned char CCPR1H @ 0x016;
volatile unsigned char CCP1CON @ 0x017;

# 47
volatile unsigned char CCPR2L @ 0x01B;
volatile unsigned char CCPR2H @ 0x01C;
volatile unsigned char CCP2CON @ 0x01D;
volatile unsigned char ADRESH @ 0x01E;
volatile unsigned char ADCON0 @ 0x01F;
volatile unsigned char OPTION_REG @ 0x081;
volatile unsigned char TRISA @ 0x085;
volatile unsigned char TRISB @ 0x086;
volatile unsigned char TRISC @ 0x087;
volatile unsigned char TRISE @ 0x089;
volatile unsigned char PIE1 @ 0x08C;
volatile unsigned char PIE2 @ 0x08D;

volatile unsigned char OSCCON @ 0x08F;
volatile unsigned char OSCTUNE @ 0x090;
volatile unsigned char SSPCON2 @ 0x091;
volatile unsigned char PR2 @ 0x092;
volatile unsigned char SSPADD @ 0x093;
volatile unsigned char SSPSTAT @ 0x094;
volatile unsigned char WPUB @ 0x095;
volatile unsigned char IOCB @ 0x096;

# 74
volatile unsigned char ADRESL @ 0x09E;
volatile unsigned char ADCON1 @ 0x09F;
volatile unsigned char WDTCON @ 0x105;




volatile unsigned char EEDAT @ 0x10C;
volatile unsigned char EEDATA @ 0x10C;
volatile unsigned char EEADR @ 0x10D;
volatile unsigned char EEADRL @ 0x10D;
volatile unsigned char EEDATH @ 0x10E;
volatile unsigned char EEADRH @ 0x10F;

volatile unsigned char TABLE_SPH @ 0x110;
volatile unsigned char TABLE_SPL @ 0x111;
volatile unsigned char TABLE_DATAH @ 0x112;

# 99
volatile unsigned char WPUE @ 0x11A;
volatile unsigned char OPA0CON @ 0x11C;
volatile unsigned char OPA0ADJ @ 0x11D;



volatile unsigned char ANSEL @ 0x188;
volatile unsigned char ANSELH @ 0x189;

volatile unsigned char EECON1 @ 0x18C;
volatile unsigned char EECON2 @ 0x18D;
volatile unsigned char WPUA @ 0x18E;
volatile unsigned char WPUC @ 0x18F;

volatile unsigned char LEDCON0 @ 0x190;
volatile unsigned char LEDCON1 @ 0x191;
volatile unsigned char LEDADD @ 0x192;
volatile unsigned char LEDDATA @ 0x193;
volatile unsigned char LCDCON0 @ 0x190;
volatile unsigned char LCDCON1 @ 0x191;
volatile unsigned char LCDADD @ 0x192;
volatile unsigned char LCDDATA @ 0x193;
volatile unsigned char SEGEN2 @ 0x194;
volatile unsigned char SEGEN1 @ 0x195;
volatile unsigned char SEGEN0 @ 0x196;
volatile unsigned char COMEN @ 0x197;



volatile bit CARRY @ ((unsigned)&STATUS*8)+0;
volatile bit DC @ ((unsigned)&STATUS*8)+1;
volatile bit ZERO @ ((unsigned)&STATUS*8)+2;
volatile bit PD @ ((unsigned)&STATUS*8)+3;
volatile bit TO @ ((unsigned)&STATUS*8)+4;
volatile bit IRP @ ((unsigned)&STATUS*8)+7;


volatile bit RA0 @ ((unsigned)&PORTA*8)+0;
volatile bit RA1 @ ((unsigned)&PORTA*8)+1;
volatile bit RA2 @ ((unsigned)&PORTA*8)+2;
volatile bit RA3 @ ((unsigned)&PORTA*8)+3;
volatile bit RA4 @ ((unsigned)&PORTA*8)+4;
volatile bit RA5 @ ((unsigned)&PORTA*8)+5;
volatile bit RA6 @ ((unsigned)&PORTA*8)+6;
volatile bit RA7 @ ((unsigned)&PORTA*8)+7;


volatile bit RB0 @ ((unsigned)&PORTB*8)+0;
volatile bit RB1 @ ((unsigned)&PORTB*8)+1;
volatile bit RB2 @ ((unsigned)&PORTB*8)+2;
volatile bit RB3 @ ((unsigned)&PORTB*8)+3;
volatile bit RB4 @ ((unsigned)&PORTB*8)+4;
volatile bit RB5 @ ((unsigned)&PORTB*8)+5;
volatile bit RB6 @ ((unsigned)&PORTB*8)+6;
volatile bit RB7 @ ((unsigned)&PORTB*8)+7;


volatile bit RC0 @ ((unsigned)&PORTC*8)+0;
volatile bit RC1 @ ((unsigned)&PORTC*8)+1;
volatile bit RC2 @ ((unsigned)&PORTC*8)+2;
volatile bit RC3 @ ((unsigned)&PORTC*8)+3;
volatile bit RC4 @ ((unsigned)&PORTC*8)+4;
volatile bit RC5 @ ((unsigned)&PORTC*8)+5;
volatile bit RC6 @ ((unsigned)&PORTC*8)+6;
volatile bit RC7 @ ((unsigned)&PORTC*8)+7;


volatile bit RE0 @ ((unsigned)&PORTE*8)+0;
volatile bit RE1 @ ((unsigned)&PORTE*8)+1;
volatile bit RE2 @ ((unsigned)&PORTE*8)+2;
volatile bit RE3 @ ((unsigned)&PORTE*8)+3;


volatile bit RBIF @ ((unsigned)&INTCON*8)+0;

volatile bit RABIF @ ((unsigned)&INTCON*8)+0;
volatile bit INTF @ ((unsigned)&INTCON*8)+1;
volatile bit T0IF @ ((unsigned)&INTCON*8)+2;
volatile bit RBIE @ ((unsigned)&INTCON*8)+3;

volatile bit RABIE @ ((unsigned)&INTCON*8)+3;
volatile bit INTE @ ((unsigned)&INTCON*8)+4;
volatile bit T0IE @ ((unsigned)&INTCON*8)+5;
volatile bit PEIE @ ((unsigned)&INTCON*8)+6;
volatile bit GIE @ ((unsigned)&INTCON*8)+7;


volatile bit TMR1IF @ ((unsigned)&PIR1*8)+0;
volatile bit TMR2IF @ ((unsigned)&PIR1*8)+1;
volatile bit CCP1IF @ ((unsigned)&PIR1*8)+2;
volatile bit SSPIF @ ((unsigned)&PIR1*8)+3;
volatile bit TXIF @ ((unsigned)&PIR1*8)+4;
volatile bit RCIF @ ((unsigned)&PIR1*8)+5;
volatile bit ADIF @ ((unsigned)&PIR1*8)+6;


volatile bit CCP2IF @ ((unsigned)&PIR2*8)+0;
volatile bit BCLIF @ ((unsigned)&PIR2*8)+3;
volatile bit EEIF @ ((unsigned)&PIR2*8)+4;
volatile bit C1IF @ ((unsigned)&PIR2*8)+5;
volatile bit C2IF @ ((unsigned)&PIR2*8)+6;


volatile bit TMR1ON @ ((unsigned)&T1CON*8)+0;
volatile bit TMR1CS @ ((unsigned)&T1CON*8)+1;
volatile bit T1SYNC @ ((unsigned)&T1CON*8)+2;
volatile bit T1OSCEN @ ((unsigned)&T1CON*8)+3;
volatile bit T1CKPS0 @ ((unsigned)&T1CON*8)+4;
volatile bit T1CKPS1 @ ((unsigned)&T1CON*8)+5;
volatile bit TMR1GE @ ((unsigned)&T1CON*8)+6;
volatile bit T1GINV @ ((unsigned)&T1CON*8)+7;


volatile bit T2CKPS0 @ ((unsigned)&T2CON*8)+0;
volatile bit T2CKPS1 @ ((unsigned)&T2CON*8)+1;
volatile bit TMR2ON @ ((unsigned)&T2CON*8)+2;
volatile bit TOUTPS0 @ ((unsigned)&T2CON*8)+3;
volatile bit TOUTPS1 @ ((unsigned)&T2CON*8)+4;
volatile bit TOUTPS2 @ ((unsigned)&T2CON*8)+5;
volatile bit TOUTPS3 @ ((unsigned)&T2CON*8)+6;


volatile bit SSPM0 @ ((unsigned)&SSPCON*8)+0;
volatile bit SSPM1 @ ((unsigned)&SSPCON*8)+1;
volatile bit SSPM2 @ ((unsigned)&SSPCON*8)+2;
volatile bit SSPM3 @ ((unsigned)&SSPCON*8)+3;
volatile bit CKP @ ((unsigned)&SSPCON*8)+4;
volatile bit SSPEN @ ((unsigned)&SSPCON*8)+5;
volatile bit SSPOV @ ((unsigned)&SSPCON*8)+6;
volatile bit WCOL @ ((unsigned)&SSPCON*8)+7;


volatile bit CCP1M0 @ ((unsigned)&CCP1CON*8)+0;
volatile bit CCP1M1 @ ((unsigned)&CCP1CON*8)+1;
volatile bit CCP1M2 @ ((unsigned)&CCP1CON*8)+2;
volatile bit CCP1M3 @ ((unsigned)&CCP1CON*8)+3;
volatile bit DC1B0 @ ((unsigned)&CCP1CON*8)+4;
volatile bit DC1B1 @ ((unsigned)&CCP1CON*8)+5;
volatile bit P1M0 @ ((unsigned)&CCP1CON*8)+6;
volatile bit P1M1 @ ((unsigned)&CCP1CON*8)+7;

# 251
volatile bit CCP2M0 @ ((unsigned)&CCP2CON*8)+0;
volatile bit CCP2M1 @ ((unsigned)&CCP2CON*8)+1;
volatile bit CCP2M2 @ ((unsigned)&CCP2CON*8)+2;
volatile bit CCP2M3 @ ((unsigned)&CCP2CON*8)+3;
volatile bit DC2B0 @ ((unsigned)&CCP2CON*8)+4;
volatile bit DC2B1 @ ((unsigned)&CCP2CON*8)+5;
volatile bit CCP2IN0 @ ((unsigned)&CCP2CON*8)+6;
volatile bit CCP2IN1 @ ((unsigned)&CCP2CON*8)+7;


volatile bit ADON @ ((unsigned)&ADCON0*8)+0;
volatile bit GODONE @ ((unsigned)&ADCON0*8)+1;
volatile bit CHS0 @ ((unsigned)&ADCON0*8)+2;
volatile bit CHS1 @ ((unsigned)&ADCON0*8)+3;
volatile bit CHS2 @ ((unsigned)&ADCON0*8)+4;
volatile bit CHS3 @ ((unsigned)&ADCON0*8)+5;
volatile bit ADCS0 @ ((unsigned)&ADCON0*8)+6;
volatile bit ADCS1 @ ((unsigned)&ADCON0*8)+7;


volatile bit PS0 @ ((unsigned)&OPTION_REG*8)+0;
volatile bit PS1 @ ((unsigned)&OPTION_REG*8)+1;
volatile bit PS2 @ ((unsigned)&OPTION_REG*8)+2;
volatile bit PSA @ ((unsigned)&OPTION_REG*8)+3;
volatile bit T0SE @ ((unsigned)&OPTION_REG*8)+4;
volatile bit T0CS @ ((unsigned)&OPTION_REG*8)+5;
volatile bit INTEDG @ ((unsigned)&OPTION_REG*8)+6;
volatile bit RBPU @ ((unsigned)&OPTION_REG*8)+7;

volatile bit RABPU @ ((unsigned)&OPTION_REG*8)+7;


volatile bit TRISA0 @ ((unsigned)&TRISA*8)+0;
volatile bit TRISA1 @ ((unsigned)&TRISA*8)+1;
volatile bit TRISA2 @ ((unsigned)&TRISA*8)+2;
volatile bit TRISA3 @ ((unsigned)&TRISA*8)+3;
volatile bit TRISA4 @ ((unsigned)&TRISA*8)+4;
volatile bit TRISA5 @ ((unsigned)&TRISA*8)+5;
volatile bit TRISA6 @ ((unsigned)&TRISA*8)+6;
volatile bit TRISA7 @ ((unsigned)&TRISA*8)+7;


volatile bit TRISB0 @ ((unsigned)&TRISB*8)+0;
volatile bit TRISB1 @ ((unsigned)&TRISB*8)+1;
volatile bit TRISB2 @ ((unsigned)&TRISB*8)+2;
volatile bit TRISB3 @ ((unsigned)&TRISB*8)+3;
volatile bit TRISB4 @ ((unsigned)&TRISB*8)+4;
volatile bit TRISB5 @ ((unsigned)&TRISB*8)+5;
volatile bit TRISB6 @ ((unsigned)&TRISB*8)+6;
volatile bit TRISB7 @ ((unsigned)&TRISB*8)+7;


volatile bit TRISC0 @ ((unsigned)&TRISC*8)+0;
volatile bit TRISC1 @ ((unsigned)&TRISC*8)+1;
volatile bit TRISC2 @ ((unsigned)&TRISC*8)+2;
volatile bit TRISC3 @ ((unsigned)&TRISC*8)+3;
volatile bit TRISC4 @ ((unsigned)&TRISC*8)+4;
volatile bit TRISC5 @ ((unsigned)&TRISC*8)+5;
volatile bit TRISC6 @ ((unsigned)&TRISC*8)+6;
volatile bit TRISC7 @ ((unsigned)&TRISC*8)+7;



volatile bit TRISE0 @ ((unsigned)&TRISE*8)+0;
volatile bit TRISE1 @ ((unsigned)&TRISE*8)+1;
volatile bit TRISE2 @ ((unsigned)&TRISE*8)+2;
volatile bit TRISE3 @ ((unsigned)&TRISE*8)+3;


volatile bit TMR1IE @ ((unsigned)&PIE1*8)+0;
volatile bit TMR2IE @ ((unsigned)&PIE1*8)+1;
volatile bit CCP1IE @ ((unsigned)&PIE1*8)+2;
volatile bit SSPIE @ ((unsigned)&PIE1*8)+3;
volatile bit TXIE @ ((unsigned)&PIE1*8)+4;
volatile bit RCIE @ ((unsigned)&PIE1*8)+5;
volatile bit ADIE @ ((unsigned)&PIE1*8)+6;


volatile bit CCP2IE @ ((unsigned)&PIE2*8)+0;
volatile bit BCLIE @ ((unsigned)&PIE2*8)+3;
volatile bit EEIE @ ((unsigned)&PIE2*8)+4;
volatile bit C1IE @ ((unsigned)&PIE2*8)+5;
volatile bit C2IE @ ((unsigned)&PIE2*8)+6;



volatile bit SCS @ ((unsigned)&OSCCON*8)+0;
volatile bit IRCF0 @ ((unsigned)&OSCCON*8)+4;
volatile bit IRCF1 @ ((unsigned)&OSCCON*8)+5;
volatile bit IRCF2 @ ((unsigned)&OSCCON*8)+6;


volatile bit TUN0 @ ((unsigned)&OSCTUNE*8)+0;
volatile bit TUN1 @ ((unsigned)&OSCTUNE*8)+1;
volatile bit TUN2 @ ((unsigned)&OSCTUNE*8)+2;
volatile bit TUN3 @ ((unsigned)&OSCTUNE*8)+3;
volatile bit TUN4 @ ((unsigned)&OSCTUNE*8)+4;


volatile bit SEN @ ((unsigned)&SSPCON2*8)+0;
volatile bit RSEN @ ((unsigned)&SSPCON2*8)+1;
volatile bit PEN @ ((unsigned)&SSPCON2*8)+2;
volatile bit RCEN @ ((unsigned)&SSPCON2*8)+3;
volatile bit ACKEN @ ((unsigned)&SSPCON2*8)+4;
volatile bit ACKDT @ ((unsigned)&SSPCON2*8)+5;
volatile bit ACKSTAT @ ((unsigned)&SSPCON2*8)+6;
volatile bit GCEN @ ((unsigned)&SSPCON2*8)+7;


volatile bit BF @ ((unsigned)&SSPSTAT*8)+0;
volatile bit UA @ ((unsigned)&SSPSTAT*8)+1;
volatile bit RW @ ((unsigned)&SSPSTAT*8)+2;
volatile bit START @ ((unsigned)&SSPSTAT*8)+3;
volatile bit STOP @ ((unsigned)&SSPSTAT*8)+4;
volatile bit DA @ ((unsigned)&SSPSTAT*8)+5;
volatile bit CKE @ ((unsigned)&SSPSTAT*8)+6;
volatile bit SMP @ ((unsigned)&SSPSTAT*8)+7;


volatile bit WPUA0 @ ((unsigned)&WPUA*8)+0;
volatile bit WPUA1 @ ((unsigned)&WPUA*8)+1;
volatile bit WPUA2 @ ((unsigned)&WPUA*8)+2;
volatile bit WPUA3 @ ((unsigned)&WPUA*8)+3;
volatile bit WPUA4 @ ((unsigned)&WPUA*8)+4;
volatile bit WPUA5 @ ((unsigned)&WPUA*8)+5;
volatile bit WPUA6 @ ((unsigned)&WPUA*8)+6;
volatile bit WPUA7 @ ((unsigned)&WPUA*8)+7;


volatile bit WPUB0 @ ((unsigned)&WPUB*8)+0;
volatile bit WPUB1 @ ((unsigned)&WPUB*8)+1;
volatile bit WPUB2 @ ((unsigned)&WPUB*8)+2;
volatile bit WPUB3 @ ((unsigned)&WPUB*8)+3;
volatile bit WPUB4 @ ((unsigned)&WPUB*8)+4;
volatile bit WPUB5 @ ((unsigned)&WPUB*8)+5;
volatile bit WPUB6 @ ((unsigned)&WPUB*8)+6;
volatile bit WPUB7 @ ((unsigned)&WPUB*8)+7;


volatile bit WPUC0 @ ((unsigned)&WPUC*8)+0;
volatile bit WPUC1 @ ((unsigned)&WPUC*8)+1;
volatile bit WPUC2 @ ((unsigned)&WPUC*8)+2;
volatile bit WPUC3 @ ((unsigned)&WPUC*8)+3;
volatile bit WPUC4 @ ((unsigned)&WPUC*8)+4;
volatile bit WPUC5 @ ((unsigned)&WPUC*8)+5;
volatile bit WPUC6 @ ((unsigned)&WPUC*8)+6;
volatile bit WPUC7 @ ((unsigned)&WPUC*8)+7;


volatile bit WPUE0 @ ((unsigned)&WPUE*8)+0;
volatile bit WPUE1 @ ((unsigned)&WPUE*8)+1;
volatile bit WPUE2 @ ((unsigned)&WPUE*8)+2;
volatile bit WPUE3 @ ((unsigned)&WPUE*8)+3;


volatile bit IOCB0 @ ((unsigned)&IOCB*8)+0;
volatile bit IOCB1 @ ((unsigned)&IOCB*8)+1;
volatile bit IOCB2 @ ((unsigned)&IOCB*8)+2;
volatile bit IOCB3 @ ((unsigned)&IOCB*8)+3;
volatile bit IOCB4 @ ((unsigned)&IOCB*8)+4;
volatile bit IOCB5 @ ((unsigned)&IOCB*8)+5;
volatile bit IOCB6 @ ((unsigned)&IOCB*8)+6;
volatile bit IOCB7 @ ((unsigned)&IOCB*8)+7;

# 429
volatile bit ADFM @ ((unsigned)&ADCON1*8)+7;


volatile bit SWDTEN @ ((unsigned)&WDTCON*8)+0;



volatile bit ANS0 @ ((unsigned)&ANSEL*8)+0;
volatile bit ANS1 @ ((unsigned)&ANSEL*8)+1;
volatile bit ANS2 @ ((unsigned)&ANSEL*8)+2;
volatile bit ANS3 @ ((unsigned)&ANSEL*8)+3;
volatile bit ANS4 @ ((unsigned)&ANSEL*8)+4;
volatile bit ANS5 @ ((unsigned)&ANSEL*8)+5;
volatile bit ANS6 @ ((unsigned)&ANSEL*8)+6;
volatile bit ANS7 @ ((unsigned)&ANSEL*8)+7;


volatile bit ANS8 @ ((unsigned)&ANSELH*8)+0;
volatile bit ANS9 @ ((unsigned)&ANSELH*8)+1;
volatile bit ANS10 @ ((unsigned)&ANSELH*8)+2;
volatile bit ANS11 @ ((unsigned)&ANSELH*8)+3;
volatile bit ANS12 @ ((unsigned)&ANSELH*8)+4;
volatile bit ANS13 @ ((unsigned)&ANSELH*8)+5;


volatile bit RD @ ((unsigned)&EECON1*8)+0;
volatile bit WR @ ((unsigned)&EECON1*8)+1;
volatile bit WREN @ ((unsigned)&EECON1*8)+2;
volatile bit WRERR @ ((unsigned)&EECON1*8)+3;
volatile bit EEPGD @ ((unsigned)&EECON1*8)+7;


# 117 "C:\item\pan2416\PAN2416\±‡“Î∆˜\CMS_ID~1.03_\data\include\cms.h"
#pragma inline(_nop)
extern void _nop(void);

# 144
extern unsigned int flash_read(unsigned short addr);


# 217
#pragma inline(_delay)
extern void _delay(unsigned long);

# 90 "C:\item\pan2416\gitforpan2416\PAV03new\FWSWES-PAV03-SCENESWITCHES-PAN2416AV\src\recive.h"
unsigned short UpdateCRC(unsigned char *CRC_input, unsigned int len);
unsigned char rx_data(void);
void channel_set(unsigned char channel_num, unsigned char status);
void recive_task(void);
void delay_task(void);

# 79 "C:\item\pan2416\gitforpan2416\PAV03new\FWSWES-PAV03-SCENESWITCHES-PAN2416AV\src\rf297L.h"
typedef enum{
UNKNOW_STATUS,
SENT_SUCCESS,
ACK_PAYLOAD_SENT_SUCCESS,
SENT_FAILURE,
}TX_RESULT_e;

extern unsigned char RF_ReadReg(unsigned char reg_addr);
extern void RF_WriteReg(unsigned char reg_addr, unsigned char write_data);
extern void RF_Write_Buff(unsigned char reg_addr,unsigned char *pBuff,unsigned char length);
extern void RF_Read_Buff(unsigned char reg_addr, unsigned char *pBuff, unsigned char length);
extern void RF_Set_TxMode(void);
extern void RF_Set_RxMode(void);
extern unsigned char RF_GetStatus(void);
extern void RF_ClearStatus(void);
extern void RF_ClearFIFO(void);
extern void RF_SetChannel(unsigned char Channel);
extern void RF_TxData(unsigned char *payload_buff,unsigned char length);
extern void RF_ENHANCE_TxData(unsigned char *payload_buff,unsigned char length,unsigned char *postback_buff);
extern unsigned char RF_RxData(unsigned char *payload_buff,unsigned char length);
extern unsigned char RF_ENHANCE_RxData(unsigned char *payload_buff,unsigned char length,unsigned char *postback_buff);

extern void RF_Init(void);
extern TX_RESULT_e RF_get_TX_result(void);
void RF_Sleep();
void RF_awaken();
void RF_Carrier(unsigned char Channel);

# 32 "C:\item\pan2416\gitforpan2416\PAV03new\FWSWES-PAV03-SCENESWITCHES-PAN2416AV\src\e2prom.h"
void AT24C02_Write_Msg(unsigned char addr ,unsigned char *data,unsigned char len);
void AT24C02_Read_Msg(unsigned char addr,unsigned char *data,unsigned char len);
unsigned char AT24C02_Read_Byte(unsigned char addr);
void AT24C02_Write_Byte(unsigned char addr ,unsigned char data);

# 7 "C:\item\pan2416\gitforpan2416\PAV03new\FWSWES-PAV03-SCENESWITCHES-PAN2416AV\src\delay.h"
extern void soft_delay_ms(unsigned int ms);

# 8 "C:\item\pan2416\gitforpan2416\PAV03new\FWSWES-PAV03-SCENESWITCHES-PAN2416AV\src\key_scan.h"
typedef struct
{
unsigned char channel_status;

unsigned char key_flag_3s;

unsigned char key_flag_5s;

}channel_flag_stu;



extern void key_Init(void);
extern void key_scan(void);
void key_value_read(void);

extern void setChannelStatus(unsigned char channel, unsigned char status);
void sledBlink(void);

# 9 "C:\item\pan2416\gitforpan2416\PAV03new\FWSWES-PAV03-SCENESWITCHES-PAN2416AV\src\system.h"
typedef enum{
CPU_FREQUENCY_EXTERNAL = 0x00,
CPU_FREQUENCY_31K = 0x01,
CPU_FREQUENCY_125K = 0x11,
CPU_FREQUENCY_250K = 0x21,
CPU_FREQUENCY_500K = 0x31,
CPU_FREQUENCY_1M = 0x41,
CPU_FREQUENCY_2M = 0x51,
CPU_FREQUENCY_4M = 0x61,
CPU_FREQUENCY_8M = 0x71
}CPU_FREQUENCY_e;

typedef enum{
PORTB_CHANGE_ISR_ENABLE = 0x80,
INT0_ISR_ENABLE = 0x10,
TIMER0_ISR_ENABLE = 0x20,
TIMER1_ISR_ENABLE = 0x01,
TIMER2_ISR_ENABLE = 0x02,
ADC_ISR_ENABLE = 0x40,
}INT_ENABLE_FLAG_e;

typedef enum{
PORTB_CHANGE_ISR_TOUCH = 0x01,
INT0_ISR_TOUCH = 0x02,
TIMER0_ISR_TOUCH = 0x04,
TIMER1_ISR_TOUCH = 0x01,
TIMER2_ISR_TOUCH = 0x02,
ADC_ISR_TOUCH = 0x40,
}INT_TOUCH_FLAG_e;

extern void Interrupt_init(void);
extern void soft_delay_ms(unsigned int ms);
extern void system_set_CPU_frequency(CPU_FREQUENCY_e CPU_Frequency);
extern void clear_interrupt_flag(void);
extern void system_to_sleep(void);
extern void Enable_Interrupt(void);
extern void Disable_Interrupt(void);
extern void System_sleep_mode(void);

# 23 "C:\item\pan2416\gitforpan2416\PAV03new\FWSWES-PAV03-SCENESWITCHES-PAN2416AV\src\recive.c"
const unsigned char crc_2_4G_lib[21] = {0xc7 ,0x8d ,0xd2 ,0x57 ,0xa1 ,0x3d ,0xa7 ,0x66 ,0xb0 ,0x75 ,0x31 ,0x11 ,0x48 ,0x96 ,0x77 ,0xf8 ,0xe3 ,0x46 ,0xe9,0xab ,0xd0 };
const unsigned char crc_lab[16] = {0x41,0x92,0x53,0x2A,0xFC,0xAB,0xCE,0x26,0x0D,0x1E,0x99,0x78,0x00,0x22,0x99,0xDE};
const unsigned char ble_crc_38[42] = {
0xD6, 0xC5, 0x44, 0x20, 0x59,
0xDE, 0xE1, 0x8F, 0x1B, 0xA5,
0xAF, 0x42, 0x7B, 0x4E, 0xCD,
0x60, 0xEB, 0x62, 0x22, 0x90,
0x2C, 0xEF, 0xF0, 0xC7, 0x8D,
0xD2, 0x57, 0xA1, 0x3D, 0xA7,
0x66, 0xB0, 0x75, 0x31, 0x11,
0x48, 0x96, 0x77 ,0xF8, 0xE3,
0x46, 0xE9
};



unsigned char rf_buf[18];
unsigned char sys_stute = 1;
unsigned int flag_5s_add = 0;
extern unsigned char power_on_flag;

extern unsigned char control_id[12][6];
extern unsigned char channel_flag;
extern unsigned char key_long_flag;
extern channel_flag_stu KEY0;
extern channel_flag_stu KEY1;
extern channel_flag_stu KEY2;
unsigned char channel_delay[3] = {0,0,0};
extern unsigned int flag_5min_add;

extern unsigned char KEY0_FLAG;
extern unsigned char KEY1_FLAG;
extern unsigned char KEY2_FLAG;
static unsigned char delay_flag = 0;

extern unsigned char channel_status;
extern unsigned char channel_startup;
unsigned char is_factory_flag = 1;
extern unsigned char power_on_delay_flag;


unsigned short UpdateCRC(unsigned char *CRC_input, unsigned int len)
{
unsigned char i,k = 0;
unsigned short CRC_acc = 0x5555;

while (len--)
{
CRC_acc = CRC_acc ^ (CRC_input[k++] << 8);

for (i = 0; i < 8; i++)
{
if ((CRC_acc & 0x8000) == 0x8000)
{
CRC_acc = CRC_acc << 1;
CRC_acc ^= 0x1021;
}
else
{
CRC_acc = CRC_acc << 1;
}
}
}
return CRC_acc;
}



unsigned char rx_data(void)
{
unsigned char rx_flag = 0;
unsigned char rand = 0;
unsigned char i = 0;
unsigned int crc16 = 0;

if(RF_RxData(rf_buf,18))
{
for(i = 0; i < 18; i++)
{
rf_buf[i] = rf_buf[i] ^ crc_2_4G_lib[3+i] ^ ble_crc_38[21+i];
}
crc16 = rf_buf[16] + rf_buf[17] * 256;
for(i = 0; i < 16; i++)
{
rf_buf[i] = rf_buf[i] ^ crc_lab[i];
}
rand = rf_buf[15];
for(i = 7; i < 15; i++)
{
rf_buf[i] ^= rand;
}
if(crc16 == UpdateCRC(rf_buf,16) )
{
if((rf_buf[3] == 0) && (rf_buf[4] == 0) && (rf_buf[5] == 0) && (rf_buf[6] == 0))
{
rx_flag=0;
}
else if((rf_buf[3] == 0xff) && (rf_buf[4] == 0xff) && (rf_buf[5] == 0xff) && (rf_buf[6] == 0xff))
{
rx_flag = 0;
}
else
rx_flag = 1;
}

}
return rx_flag;
}

static unsigned char debug = 0;
extern unsigned char match_channel_flag;
void recive_task(void)
{
unsigned char i = 0;

unsigned char match_flag = 0;
unsigned char flag = 0;
unsigned char msg[6];

switch(sys_stute)
{
case 3:
{
(TRISC0=0,RC0=1);
if(key_long_flag == 0x11)
{
key_long_flag = 0;
KEY0.key_flag_5s = 0;
for(i = 0; i < 18; i++)
{
AT24C02_Write_Byte(i + 0, 0xff);
soft_delay_ms(1);
}
}
else if(key_long_flag == 0x21)
{
key_long_flag = 0;
KEY1.key_flag_5s = 0;
for(i = 18; i < 36; i++)
{
AT24C02_Write_Byte(i, 0xff);
soft_delay_ms(1);
}
}
else if(key_long_flag == 0x41)
{
key_long_flag = 0;
KEY2.key_flag_5s = 0;
for(i = 36; i < 54; i++)
{
AT24C02_Write_Byte(i, 0xff);
soft_delay_ms(1);
}
}

for(i = 54; i < 72; i++)
{
AT24C02_Write_Byte(i, 0x00);
soft_delay_ms(1);
}

for(i = 0; i < 12; i++)
{
AT24C02_Read_Msg(i * 6, control_id[i], 6);
}
sledBlink();
soft_delay_ms(100);
sledBlink();
sys_stute=1;
}break;

case 2:
{
match_channel_flag |= 0x01;
if(key_long_flag == 0x11)
{
KEY0.key_flag_3s = 0;
flag_5s_add = 0;
key_long_flag = 0;
match_channel_flag = 0x10;
}
else if(key_long_flag == 0x21)
{
KEY1.key_flag_3s = 0;
flag_5s_add = 0;
key_long_flag = 0;
match_channel_flag = 0x20;
}
else if(key_long_flag == 0x41)
{
KEY2.key_flag_3s = 0;
flag_5s_add = 0;
key_long_flag = 0;
match_channel_flag = 0x40;
}

# 226
if(rx_data())
{
msg[0] = rf_buf[3];
msg[1] = rf_buf[4];
msg[2] = rf_buf[5];
msg[3] = rf_buf[6];
msg[4] = rf_buf[10];
msg[5] = rf_buf[2];


if (rf_buf[8] == (0x20))
{
for(i = 0; i < 3; i++)
{
if((msg[0] == control_id[i + 9][0])
&&(msg[1] == control_id[i + 9][1])
&&(msg[2] == control_id[i + 9][2])
&&(msg[3] == control_id[i + 9][3])
)
{
match_flag = 1;
break;
}
else
{
match_flag = 0;
}
}

if(match_flag == 0)
{
flag = (channel_flag >> 6) & 0x03;
if(flag >= 3)
{
flag = 0;
}
AT24C02_Write_Msg(9 * 6 + flag * 6, msg, 4);
AT24C02_Write_Msg(9 * 6 + flag * 6 + 5, msg + 5, 1);
for(i = 0; i < 4; i++)
{
control_id[flag + 9][i] = msg[i];
}

control_id[flag + 9][5] = msg[5];
flag ++;
if(flag >= 3)
{
flag = 0;
}
channel_flag &= (~(0x03 << 6));
channel_flag |= (flag << 6);
}
else
{
flag = i;
AT24C02_Write_Msg(9 * 6 + flag * 6 + 5, msg + 5, 1);
control_id[flag + 9][5] = msg[5];
}



for(i = 9; i < 12; i++)
{
if ((control_id[i][4] & (0x01 << rf_buf[9])) != 0)
{
setChannelStatus(i - 9, 1);
}
else
{
setChannelStatus(i - 9, 0);
}
}



key_long_flag = 0;

AT24C02_Write_Msg(110, &channel_flag,1);
AT24C02_Write_Msg(110, &channel_flag,1);

for(i = 0; i < 12; i++)
{
AT24C02_Read_Msg(i * 6, control_id[i], 6);
}
AT24C02_Read_Msg(110, &channel_flag, 1);

if (is_factory_flag)
{
AT24C02_Write_Byte(113, 0x5E);
soft_delay_ms(5);
AT24C02_Write_Byte(113 + 1, 0xF6);
soft_delay_ms(5);
is_factory_flag = 0;
}

sys_stute = 1;

sledBlink();
match_channel_flag = 0;
}
else if ((rf_buf[8] == (0x10) || rf_buf[8] == (0x11))
&& msg[4] != 0xff)
{
if(match_channel_flag & 0x10)
{
for(i = 0; i < 3; i++)
{
if((msg[0] == control_id[i][0])
&&(msg[1] == control_id[i][1])
&&(msg[2] == control_id[i][2])
&&(msg[3] == control_id[i][3])
&&(msg[4] == control_id[i][4])
)
{
match_flag = 1;
break;
}
else
{
match_flag = 0;
}
}

if(match_flag == 0)
{
flag = (channel_flag >> 0) & 0x03;

if(flag >= 3)
{
flag = 0;
}

AT24C02_Write_Msg(0 + flag * 6, msg, 6);
for(i = 0; i < 6; i++)
{
control_id[flag][i] = msg[i];
}

flag ++;
if(flag >= 3)
{
flag = 0;
}

channel_flag &= (~(0x03 << 0));
channel_flag |= (flag << 0);
}
else
{
flag = i;
AT24C02_Write_Msg(0 + flag * 6 + 5, &msg[5], 1);
}

setChannelStatus(0, rf_buf[9]);

key_long_flag = 0;
}
else if(match_channel_flag & 0x20)
{
for(i = 0; i < 3; i++)
{
if((msg[0] == control_id[i+3][0])
&&(msg[1] == control_id[i+3][1])
&&(msg[2] == control_id[i+3][2])
&&(msg[3] == control_id[i+3][3])
&&(msg[4] == control_id[i+3][4])
)
{
match_flag = 1;
break;
}
else
{
match_flag = 0;
}
}

if(match_flag == 0)
{
flag = (channel_flag >> 2) & 0x03;

if(flag >= 3)
{
flag = 0;
}

AT24C02_Write_Msg(3 * 6 + flag * 6, msg, 6);
for(i = 0; i < 6; i++)
{
control_id[flag + 3][i] = msg[i];
}

flag ++;
if(flag >= 3)
{
flag = 0;
}
channel_flag &= (~(0x03 << 2));
channel_flag |= (flag << 2);

}
else
{
flag = i;
debug = flag;
debug = flag;

AT24C02_Write_Msg(3 * 6 + flag * 6 + 5, &msg[5], 1);
soft_delay_ms(2);
}

setChannelStatus(1, rf_buf[9]);

key_long_flag = 0;
}
else if(match_channel_flag&0x40)
{

for(i = 0; i < 3; i++)
{
if((msg[0] == control_id[i+6][0])
&&(msg[1] == control_id[i+6][1])
&&(msg[2] == control_id[i+6][2])
&&(msg[3] == control_id[i+6][3])
&&(msg[4] == control_id[i+6][4])
)
{
match_flag = 1;
break;
}
else
{
match_flag = 0;
}
}

if(match_flag == 0)
{
flag = (channel_flag >> 4) & 0x03;

if (flag >= 3)
{
flag = 0;
}

AT24C02_Write_Msg(6 * 6 + flag * 6, msg, 6);
for(i = 0; i < 6; i++)
{
control_id[flag + 6][i] = msg[i];
}

flag ++;
if(flag >= 3)
{
flag = 0;
}

channel_flag &= (~(0x03 << 4));
channel_flag |= (flag << 4);

}
else
{
flag = i;
AT24C02_Write_Msg(6 * 6 + flag * 6 + 5, &msg[5], 1);
}

setChannelStatus(2, rf_buf[9]);

key_long_flag = 0;
}

AT24C02_Write_Msg(110, &channel_flag,1);
AT24C02_Write_Msg(110, &channel_flag,1);

for(i = 0; i < 12; i++)
{
AT24C02_Read_Msg(i * 6, control_id[i], 6);
}
AT24C02_Read_Msg(110, &channel_flag, 1);

if (is_factory_flag)
{
AT24C02_Write_Byte(113, 0x5E);
soft_delay_ms(5);
AT24C02_Write_Byte(113 + 1, 0xF6);
soft_delay_ms(5);
is_factory_flag = 0;
}

sys_stute = 1;

sledBlink();
match_channel_flag = 0;
}
}
else
{
if(flag_5s_add > 500)
{
sys_stute = 1;
match_channel_flag = 0;
}
}
}break;
case 1:
{
if(rx_data())
{
if (rf_buf[8] == (0x20))
{
if(rf_buf[10] != 0xff)
{
for (i = 9; i < 12; i++)
{
if((rf_buf[3] == control_id[i][0])
&&(rf_buf[4] == control_id[i][1])
&&(rf_buf[5] == control_id[i][2])
&&(rf_buf[6] == control_id[i][3]))
{
if(rf_buf[2] != control_id[i][5])
{
control_id[i][5] = rf_buf[2];

if(rf_buf[9] < (6))
{
sledBlink();


for(i = 9; i < 12; i++)
{
if ((control_id[i][4] & (0x01 << rf_buf[9])) != 0)
{
setChannelStatus(i - 9, 1);
}
else
{
setChannelStatus(i - 9, 0);
}
}

}

}
break;
}

}
}

}
else if (rf_buf[8] == (0x21))
{
match_flag = 0;
for(i= 0; i< 12; i++)
{
if((rf_buf[3] == control_id[i][0])
&&(rf_buf[4] == control_id[i][1])
&&(rf_buf[5] == control_id[i][2])
&&(rf_buf[6] == control_id[i][3]))
{
if(rf_buf[2] != control_id[i][5])
{
control_id[i][5] = rf_buf[2];
match_flag = 1;
}
break;
}
}

if (match_flag && rf_buf[9] < (6) && rf_buf[10] <= (1) && rf_buf[11] < (3))
{

if (rf_buf[10] == (0))
{
control_id[9 + rf_buf[11]][4] &= (~ (0x01 << rf_buf[9]));
}
else
{
control_id[9 + rf_buf[11]][4] |= ((0x01 << rf_buf[9]));
}

AT24C02_Write_Msg(9 * 6 + rf_buf[11] * 6 + 4, &control_id[9 + rf_buf[11]][4], 1);
soft_delay_ms(1);


for(i = 0; i < 12; i++)
{
AT24C02_Read_Msg(i * 6, control_id[i], 6);
}
AT24C02_Read_Msg(110, &channel_flag, 1);


if (rf_buf[10] == (1))
{
setChannelStatus(rf_buf[11], 1);
}
else if (rf_buf[10] == (0))
{
setChannelStatus(rf_buf[11], 0);
}

sledBlink();
}

}
else if (rf_buf[8] == (0x10) || rf_buf[8] == (0x11))
{
if(rf_buf[10] != 0xff)
{
for(i=0; i<9; i++)
{
if ((is_factory_flag == 1)
&&((rf_buf[3] == 0x11)
&&(rf_buf[4] == 0x56)
&&(rf_buf[5] == 0x32)
&&(rf_buf[6] == 0xF9))
||
((rf_buf[3] == control_id[i][0])
&&(rf_buf[4] == control_id[i][1])
&&(rf_buf[5] == control_id[i][2])
&&(rf_buf[6] == control_id[i][3]))
)
{
if(rf_buf[2] != control_id[i][5])
{
control_id[i][5] = rf_buf[2];
if(rf_buf[10] == control_id[i][4])
{
if(flag == 0)
{
flag = 1;
sledBlink();
}

if(rf_buf[11] == 0)
{
if(i < 3)
{
if((KEY0_FLAG == 0))
{
if(rf_buf[9] == 2)
setChannelStatus(0, 2);
else
setChannelStatus(0, rf_buf[9]);
}
}
else if(i < 6)
{
if((KEY1_FLAG == 0))
{
if(rf_buf[9] == 2)
setChannelStatus(1, 2);
else
setChannelStatus(1, rf_buf[9]);

}
}
else
{
if((KEY2_FLAG == 0))
{
if(rf_buf[9] == 2)
setChannelStatus(2, 2);
else
setChannelStatus(2, rf_buf[9]);
}
}
}
else
{
flag_5min_add = 0;
if(delay_flag == 1)
{
channel_delay[0] = 0;
delay_flag = 0;
}
if(i < 3)
{
channel_delay[0] |= 0x01;
}
else if(i < 6)
{
channel_delay[0] |= 0x02;
}
else
{
channel_delay[0] |= 0x04;
}
channel_delay[1] = rf_buf[9];
channel_delay[2] = rf_buf[11];
}
}
}
}

}
}
else
{
for(i=0; i<9; i++)
{
if ((is_factory_flag == 1)
&&((rf_buf[3] == 0x11)
&&(rf_buf[4] == 0x56)
&&(rf_buf[5] == 0x32)
&&(rf_buf[6] == 0xF9))
||
((rf_buf[3] == control_id[i][0])
&&(rf_buf[4] == control_id[i][1])
&&(rf_buf[5] == control_id[i][2])
&&(rf_buf[6] == control_id[i][3]))
)
{
if((rf_buf[2] != control_id[i][5]))
{
control_id[i][5] = rf_buf[2];

sledBlink();

if((rf_buf[11] == 0))
{

if((KEY0_FLAG == 0))
{
if(rf_buf[9] == 2)
setChannelStatus(0, 2);
else
setChannelStatus(0, rf_buf[9]);
}

if((KEY1_FLAG == 0))
{
if(rf_buf[9] == 2)
setChannelStatus(1, 2);
else
setChannelStatus(1, rf_buf[9]);
}

if((KEY2_FLAG == 0))
{
if(rf_buf[9] == 2)
setChannelStatus(2, 2);
else
setChannelStatus(2, rf_buf[9]);
}

}
else
{
flag_5min_add = 0;
if(delay_flag == 1)
{
channel_delay[0] = 0;
delay_flag = 0;
}

channel_delay[0] |= 0x01;
channel_delay[0] |= 0x02;
channel_delay[0] |= 0x04;

channel_delay[1] = rf_buf[9];
channel_delay[2] = rf_buf[11];
}

}
}
}
}
}
else if (rf_buf[8] == (0x30))
{




if(rf_buf[2] != control_id[i][5])
{
control_id[i][5] = rf_buf[2];

match_flag = 0;
for(i= 0; i< 9; i++)
{
if((rf_buf[3] == control_id[i][0])
&&(rf_buf[4] == control_id[i][1])
&&(rf_buf[5] == control_id[i][2])
&&(rf_buf[6] == control_id[i][3]))
{
if (rf_buf[10] == 0xFF)
{
match_flag |= 0x07;
break;
}
else if (rf_buf[10] == control_id[i][4])
{
match_flag |= (1 << (i / 3));
}
}
}
}

if (match_flag
&& rf_buf[9] <= 2)
{

for(i = 0; i < (3); i++)
{
if (match_flag & (1 << i))
{
if (rf_buf[9] == 0)
{
{ channel_startup |= (1 << ((i << 1) + 0)); channel_startup &= (~(1 << ((i << 1) + 1))); };
setChannelStatus(i, 0);
}
else if (rf_buf[9] == 1)
{
{ channel_startup &= (~(1 << ((i << 1) + 0))); channel_startup &= (~(1 << ((i << 1) + 1))); };
setChannelStatus(i, 1);
}
else if (rf_buf[9] == 2)
{
{ channel_startup |= (1 << ((i << 1) + 1)); channel_startup &= (~(1 << ((i << 1) + 0))); };

if (i == 0)
{
setChannelStatus(0, KEY0.channel_status);
}
else if (i == 1)
{
setChannelStatus(1, KEY1.channel_status);
}
else if (i == 2)
{
setChannelStatus(2, KEY2.channel_status);
}
}
}
}

AT24C02_Write_Msg(112, &channel_startup, 1);

sledBlink();
}

}


soft_delay_ms(100);
RF_ClearFIFO();
RF_ClearStatus();

}
}break;
}

}


void channel_set(unsigned char channel_num, unsigned char status)
{
switch(channel_num)
{
case 0 :
{
if(status)
{
TRISB6 = 0;
RB6 = 1;
}
else
{
TRISB6 = 0;
RB6 = 0;
}
}break;
case 1:
{
if(status)
{
TRISB5 = 0;
RB5 = 1;
}
else
{
TRISB5 = 0;
RB5 = 0;
}
}break;
case 2:
{
if(status)
{
TRISB4 = 0;
RB4 = 1;
}
else
{
TRISB4 = 0;
RB4 = 0;
}
}break;
}
}

void delay_task(void)
{
if(power_on_delay_flag == 1)
{
if(flag_5s_add > 200)
{
power_on_delay_flag = 0;
power_on_flag = 0;
AT24C02_Write_Msg(115, &power_on_flag, 1);
}
}

if(channel_delay[0] != 0)
{
if(delay_flag == 0)delay_flag = 1;
if(channel_delay[2] > 0)
{
if(flag_5min_add >= 30000)
{
flag_5min_add = 0;
channel_delay[2]--;
}
}
else
{

# 1042
if (channel_delay[1] <= 2)
{
if (channel_delay[0] & 0x01)
{
setChannelStatus(0, channel_delay[1]);
}

if (channel_delay[0] & 0x02)
{
setChannelStatus(1, channel_delay[1]);
}

if (channel_delay[0] & 0x04)
{
setChannelStatus(2, channel_delay[1]);
}
}




channel_delay[0] = 0;
channel_delay[1] = 0;
channel_delay[2] = 0;
delay_flag=0;
}
}
}
