
# 1 "C:\item\pan2416\gitforpan2416\PAV03new\FWSWES-PAV03-SCENESWITCHES-PAN2416AV\src\rf297L.c"

# 18 "C:\item\pan2416\PAN2416\±‡“Î∆˜\CMS_ID~1.03_\data\include\cms89f228.h"
volatile unsigned char INDF @ 0x000;
volatile unsigned char TMR0 @ 0x001;
volatile unsigned char PCL @ 0x002;
volatile unsigned char STATUS @ 0x003;
volatile unsigned char FSR @ 0x004;
volatile unsigned char PORTA @ 0x005;
volatile unsigned char PORTB @ 0x006;
volatile unsigned char PORTC @ 0x007;

volatile unsigned char PORTE @ 0x009;
volatile unsigned char PCLATH @ 0x00A;
volatile unsigned char INTCON @ 0x00B;
volatile unsigned char PIR1 @ 0x00C;
volatile unsigned char PIR2 @ 0x00D;
volatile unsigned char TMR1L @ 0x00E;
volatile unsigned char TMR1H @ 0x00F;
volatile unsigned char T1CON @ 0x010;
volatile unsigned char TMR2 @ 0x011;
volatile unsigned char T2CON @ 0x012;
volatile unsigned char SSPBUF @ 0x013;
volatile unsigned char SSPCON @ 0x014;
volatile unsigned char CCPR1L @ 0x015;
volatile unsigned char CCPR1H @ 0x016;
volatile unsigned char CCP1CON @ 0x017;

# 47
volatile unsigned char CCPR2L @ 0x01B;
volatile unsigned char CCPR2H @ 0x01C;
volatile unsigned char CCP2CON @ 0x01D;
volatile unsigned char ADRESH @ 0x01E;
volatile unsigned char ADCON0 @ 0x01F;
volatile unsigned char OPTION_REG @ 0x081;
volatile unsigned char TRISA @ 0x085;
volatile unsigned char TRISB @ 0x086;
volatile unsigned char TRISC @ 0x087;
volatile unsigned char TRISE @ 0x089;
volatile unsigned char PIE1 @ 0x08C;
volatile unsigned char PIE2 @ 0x08D;

volatile unsigned char OSCCON @ 0x08F;
volatile unsigned char OSCTUNE @ 0x090;
volatile unsigned char SSPCON2 @ 0x091;
volatile unsigned char PR2 @ 0x092;
volatile unsigned char SSPADD @ 0x093;
volatile unsigned char SSPSTAT @ 0x094;
volatile unsigned char WPUB @ 0x095;
volatile unsigned char IOCB @ 0x096;

# 74
volatile unsigned char ADRESL @ 0x09E;
volatile unsigned char ADCON1 @ 0x09F;
volatile unsigned char WDTCON @ 0x105;




volatile unsigned char EEDAT @ 0x10C;
volatile unsigned char EEDATA @ 0x10C;
volatile unsigned char EEADR @ 0x10D;
volatile unsigned char EEADRL @ 0x10D;
volatile unsigned char EEDATH @ 0x10E;
volatile unsigned char EEADRH @ 0x10F;

volatile unsigned char TABLE_SPH @ 0x110;
volatile unsigned char TABLE_SPL @ 0x111;
volatile unsigned char TABLE_DATAH @ 0x112;

# 99
volatile unsigned char WPUE @ 0x11A;
volatile unsigned char OPA0CON @ 0x11C;
volatile unsigned char OPA0ADJ @ 0x11D;



volatile unsigned char ANSEL @ 0x188;
volatile unsigned char ANSELH @ 0x189;

volatile unsigned char EECON1 @ 0x18C;
volatile unsigned char EECON2 @ 0x18D;
volatile unsigned char WPUA @ 0x18E;
volatile unsigned char WPUC @ 0x18F;

volatile unsigned char LEDCON0 @ 0x190;
volatile unsigned char LEDCON1 @ 0x191;
volatile unsigned char LEDADD @ 0x192;
volatile unsigned char LEDDATA @ 0x193;
volatile unsigned char LCDCON0 @ 0x190;
volatile unsigned char LCDCON1 @ 0x191;
volatile unsigned char LCDADD @ 0x192;
volatile unsigned char LCDDATA @ 0x193;
volatile unsigned char SEGEN2 @ 0x194;
volatile unsigned char SEGEN1 @ 0x195;
volatile unsigned char SEGEN0 @ 0x196;
volatile unsigned char COMEN @ 0x197;



volatile bit CARRY @ ((unsigned)&STATUS*8)+0;
volatile bit DC @ ((unsigned)&STATUS*8)+1;
volatile bit ZERO @ ((unsigned)&STATUS*8)+2;
volatile bit PD @ ((unsigned)&STATUS*8)+3;
volatile bit TO @ ((unsigned)&STATUS*8)+4;
volatile bit IRP @ ((unsigned)&STATUS*8)+7;


volatile bit RA0 @ ((unsigned)&PORTA*8)+0;
volatile bit RA1 @ ((unsigned)&PORTA*8)+1;
volatile bit RA2 @ ((unsigned)&PORTA*8)+2;
volatile bit RA3 @ ((unsigned)&PORTA*8)+3;
volatile bit RA4 @ ((unsigned)&PORTA*8)+4;
volatile bit RA5 @ ((unsigned)&PORTA*8)+5;
volatile bit RA6 @ ((unsigned)&PORTA*8)+6;
volatile bit RA7 @ ((unsigned)&PORTA*8)+7;


volatile bit RB0 @ ((unsigned)&PORTB*8)+0;
volatile bit RB1 @ ((unsigned)&PORTB*8)+1;
volatile bit RB2 @ ((unsigned)&PORTB*8)+2;
volatile bit RB3 @ ((unsigned)&PORTB*8)+3;
volatile bit RB4 @ ((unsigned)&PORTB*8)+4;
volatile bit RB5 @ ((unsigned)&PORTB*8)+5;
volatile bit RB6 @ ((unsigned)&PORTB*8)+6;
volatile bit RB7 @ ((unsigned)&PORTB*8)+7;


volatile bit RC0 @ ((unsigned)&PORTC*8)+0;
volatile bit RC1 @ ((unsigned)&PORTC*8)+1;
volatile bit RC2 @ ((unsigned)&PORTC*8)+2;
volatile bit RC3 @ ((unsigned)&PORTC*8)+3;
volatile bit RC4 @ ((unsigned)&PORTC*8)+4;
volatile bit RC5 @ ((unsigned)&PORTC*8)+5;
volatile bit RC6 @ ((unsigned)&PORTC*8)+6;
volatile bit RC7 @ ((unsigned)&PORTC*8)+7;


volatile bit RE0 @ ((unsigned)&PORTE*8)+0;
volatile bit RE1 @ ((unsigned)&PORTE*8)+1;
volatile bit RE2 @ ((unsigned)&PORTE*8)+2;
volatile bit RE3 @ ((unsigned)&PORTE*8)+3;


volatile bit RBIF @ ((unsigned)&INTCON*8)+0;

volatile bit RABIF @ ((unsigned)&INTCON*8)+0;
volatile bit INTF @ ((unsigned)&INTCON*8)+1;
volatile bit T0IF @ ((unsigned)&INTCON*8)+2;
volatile bit RBIE @ ((unsigned)&INTCON*8)+3;

volatile bit RABIE @ ((unsigned)&INTCON*8)+3;
volatile bit INTE @ ((unsigned)&INTCON*8)+4;
volatile bit T0IE @ ((unsigned)&INTCON*8)+5;
volatile bit PEIE @ ((unsigned)&INTCON*8)+6;
volatile bit GIE @ ((unsigned)&INTCON*8)+7;


volatile bit TMR1IF @ ((unsigned)&PIR1*8)+0;
volatile bit TMR2IF @ ((unsigned)&PIR1*8)+1;
volatile bit CCP1IF @ ((unsigned)&PIR1*8)+2;
volatile bit SSPIF @ ((unsigned)&PIR1*8)+3;
volatile bit TXIF @ ((unsigned)&PIR1*8)+4;
volatile bit RCIF @ ((unsigned)&PIR1*8)+5;
volatile bit ADIF @ ((unsigned)&PIR1*8)+6;


volatile bit CCP2IF @ ((unsigned)&PIR2*8)+0;
volatile bit BCLIF @ ((unsigned)&PIR2*8)+3;
volatile bit EEIF @ ((unsigned)&PIR2*8)+4;
volatile bit C1IF @ ((unsigned)&PIR2*8)+5;
volatile bit C2IF @ ((unsigned)&PIR2*8)+6;


volatile bit TMR1ON @ ((unsigned)&T1CON*8)+0;
volatile bit TMR1CS @ ((unsigned)&T1CON*8)+1;
volatile bit T1SYNC @ ((unsigned)&T1CON*8)+2;
volatile bit T1OSCEN @ ((unsigned)&T1CON*8)+3;
volatile bit T1CKPS0 @ ((unsigned)&T1CON*8)+4;
volatile bit T1CKPS1 @ ((unsigned)&T1CON*8)+5;
volatile bit TMR1GE @ ((unsigned)&T1CON*8)+6;
volatile bit T1GINV @ ((unsigned)&T1CON*8)+7;


volatile bit T2CKPS0 @ ((unsigned)&T2CON*8)+0;
volatile bit T2CKPS1 @ ((unsigned)&T2CON*8)+1;
volatile bit TMR2ON @ ((unsigned)&T2CON*8)+2;
volatile bit TOUTPS0 @ ((unsigned)&T2CON*8)+3;
volatile bit TOUTPS1 @ ((unsigned)&T2CON*8)+4;
volatile bit TOUTPS2 @ ((unsigned)&T2CON*8)+5;
volatile bit TOUTPS3 @ ((unsigned)&T2CON*8)+6;


volatile bit SSPM0 @ ((unsigned)&SSPCON*8)+0;
volatile bit SSPM1 @ ((unsigned)&SSPCON*8)+1;
volatile bit SSPM2 @ ((unsigned)&SSPCON*8)+2;
volatile bit SSPM3 @ ((unsigned)&SSPCON*8)+3;
volatile bit CKP @ ((unsigned)&SSPCON*8)+4;
volatile bit SSPEN @ ((unsigned)&SSPCON*8)+5;
volatile bit SSPOV @ ((unsigned)&SSPCON*8)+6;
volatile bit WCOL @ ((unsigned)&SSPCON*8)+7;


volatile bit CCP1M0 @ ((unsigned)&CCP1CON*8)+0;
volatile bit CCP1M1 @ ((unsigned)&CCP1CON*8)+1;
volatile bit CCP1M2 @ ((unsigned)&CCP1CON*8)+2;
volatile bit CCP1M3 @ ((unsigned)&CCP1CON*8)+3;
volatile bit DC1B0 @ ((unsigned)&CCP1CON*8)+4;
volatile bit DC1B1 @ ((unsigned)&CCP1CON*8)+5;
volatile bit P1M0 @ ((unsigned)&CCP1CON*8)+6;
volatile bit P1M1 @ ((unsigned)&CCP1CON*8)+7;

# 251
volatile bit CCP2M0 @ ((unsigned)&CCP2CON*8)+0;
volatile bit CCP2M1 @ ((unsigned)&CCP2CON*8)+1;
volatile bit CCP2M2 @ ((unsigned)&CCP2CON*8)+2;
volatile bit CCP2M3 @ ((unsigned)&CCP2CON*8)+3;
volatile bit DC2B0 @ ((unsigned)&CCP2CON*8)+4;
volatile bit DC2B1 @ ((unsigned)&CCP2CON*8)+5;
volatile bit CCP2IN0 @ ((unsigned)&CCP2CON*8)+6;
volatile bit CCP2IN1 @ ((unsigned)&CCP2CON*8)+7;


volatile bit ADON @ ((unsigned)&ADCON0*8)+0;
volatile bit GODONE @ ((unsigned)&ADCON0*8)+1;
volatile bit CHS0 @ ((unsigned)&ADCON0*8)+2;
volatile bit CHS1 @ ((unsigned)&ADCON0*8)+3;
volatile bit CHS2 @ ((unsigned)&ADCON0*8)+4;
volatile bit CHS3 @ ((unsigned)&ADCON0*8)+5;
volatile bit ADCS0 @ ((unsigned)&ADCON0*8)+6;
volatile bit ADCS1 @ ((unsigned)&ADCON0*8)+7;


volatile bit PS0 @ ((unsigned)&OPTION_REG*8)+0;
volatile bit PS1 @ ((unsigned)&OPTION_REG*8)+1;
volatile bit PS2 @ ((unsigned)&OPTION_REG*8)+2;
volatile bit PSA @ ((unsigned)&OPTION_REG*8)+3;
volatile bit T0SE @ ((unsigned)&OPTION_REG*8)+4;
volatile bit T0CS @ ((unsigned)&OPTION_REG*8)+5;
volatile bit INTEDG @ ((unsigned)&OPTION_REG*8)+6;
volatile bit RBPU @ ((unsigned)&OPTION_REG*8)+7;

volatile bit RABPU @ ((unsigned)&OPTION_REG*8)+7;


volatile bit TRISA0 @ ((unsigned)&TRISA*8)+0;
volatile bit TRISA1 @ ((unsigned)&TRISA*8)+1;
volatile bit TRISA2 @ ((unsigned)&TRISA*8)+2;
volatile bit TRISA3 @ ((unsigned)&TRISA*8)+3;
volatile bit TRISA4 @ ((unsigned)&TRISA*8)+4;
volatile bit TRISA5 @ ((unsigned)&TRISA*8)+5;
volatile bit TRISA6 @ ((unsigned)&TRISA*8)+6;
volatile bit TRISA7 @ ((unsigned)&TRISA*8)+7;


volatile bit TRISB0 @ ((unsigned)&TRISB*8)+0;
volatile bit TRISB1 @ ((unsigned)&TRISB*8)+1;
volatile bit TRISB2 @ ((unsigned)&TRISB*8)+2;
volatile bit TRISB3 @ ((unsigned)&TRISB*8)+3;
volatile bit TRISB4 @ ((unsigned)&TRISB*8)+4;
volatile bit TRISB5 @ ((unsigned)&TRISB*8)+5;
volatile bit TRISB6 @ ((unsigned)&TRISB*8)+6;
volatile bit TRISB7 @ ((unsigned)&TRISB*8)+7;


volatile bit TRISC0 @ ((unsigned)&TRISC*8)+0;
volatile bit TRISC1 @ ((unsigned)&TRISC*8)+1;
volatile bit TRISC2 @ ((unsigned)&TRISC*8)+2;
volatile bit TRISC3 @ ((unsigned)&TRISC*8)+3;
volatile bit TRISC4 @ ((unsigned)&TRISC*8)+4;
volatile bit TRISC5 @ ((unsigned)&TRISC*8)+5;
volatile bit TRISC6 @ ((unsigned)&TRISC*8)+6;
volatile bit TRISC7 @ ((unsigned)&TRISC*8)+7;



volatile bit TRISE0 @ ((unsigned)&TRISE*8)+0;
volatile bit TRISE1 @ ((unsigned)&TRISE*8)+1;
volatile bit TRISE2 @ ((unsigned)&TRISE*8)+2;
volatile bit TRISE3 @ ((unsigned)&TRISE*8)+3;


volatile bit TMR1IE @ ((unsigned)&PIE1*8)+0;
volatile bit TMR2IE @ ((unsigned)&PIE1*8)+1;
volatile bit CCP1IE @ ((unsigned)&PIE1*8)+2;
volatile bit SSPIE @ ((unsigned)&PIE1*8)+3;
volatile bit TXIE @ ((unsigned)&PIE1*8)+4;
volatile bit RCIE @ ((unsigned)&PIE1*8)+5;
volatile bit ADIE @ ((unsigned)&PIE1*8)+6;


volatile bit CCP2IE @ ((unsigned)&PIE2*8)+0;
volatile bit BCLIE @ ((unsigned)&PIE2*8)+3;
volatile bit EEIE @ ((unsigned)&PIE2*8)+4;
volatile bit C1IE @ ((unsigned)&PIE2*8)+5;
volatile bit C2IE @ ((unsigned)&PIE2*8)+6;



volatile bit SCS @ ((unsigned)&OSCCON*8)+0;
volatile bit IRCF0 @ ((unsigned)&OSCCON*8)+4;
volatile bit IRCF1 @ ((unsigned)&OSCCON*8)+5;
volatile bit IRCF2 @ ((unsigned)&OSCCON*8)+6;


volatile bit TUN0 @ ((unsigned)&OSCTUNE*8)+0;
volatile bit TUN1 @ ((unsigned)&OSCTUNE*8)+1;
volatile bit TUN2 @ ((unsigned)&OSCTUNE*8)+2;
volatile bit TUN3 @ ((unsigned)&OSCTUNE*8)+3;
volatile bit TUN4 @ ((unsigned)&OSCTUNE*8)+4;


volatile bit SEN @ ((unsigned)&SSPCON2*8)+0;
volatile bit RSEN @ ((unsigned)&SSPCON2*8)+1;
volatile bit PEN @ ((unsigned)&SSPCON2*8)+2;
volatile bit RCEN @ ((unsigned)&SSPCON2*8)+3;
volatile bit ACKEN @ ((unsigned)&SSPCON2*8)+4;
volatile bit ACKDT @ ((unsigned)&SSPCON2*8)+5;
volatile bit ACKSTAT @ ((unsigned)&SSPCON2*8)+6;
volatile bit GCEN @ ((unsigned)&SSPCON2*8)+7;


volatile bit BF @ ((unsigned)&SSPSTAT*8)+0;
volatile bit UA @ ((unsigned)&SSPSTAT*8)+1;
volatile bit RW @ ((unsigned)&SSPSTAT*8)+2;
volatile bit START @ ((unsigned)&SSPSTAT*8)+3;
volatile bit STOP @ ((unsigned)&SSPSTAT*8)+4;
volatile bit DA @ ((unsigned)&SSPSTAT*8)+5;
volatile bit CKE @ ((unsigned)&SSPSTAT*8)+6;
volatile bit SMP @ ((unsigned)&SSPSTAT*8)+7;


volatile bit WPUA0 @ ((unsigned)&WPUA*8)+0;
volatile bit WPUA1 @ ((unsigned)&WPUA*8)+1;
volatile bit WPUA2 @ ((unsigned)&WPUA*8)+2;
volatile bit WPUA3 @ ((unsigned)&WPUA*8)+3;
volatile bit WPUA4 @ ((unsigned)&WPUA*8)+4;
volatile bit WPUA5 @ ((unsigned)&WPUA*8)+5;
volatile bit WPUA6 @ ((unsigned)&WPUA*8)+6;
volatile bit WPUA7 @ ((unsigned)&WPUA*8)+7;


volatile bit WPUB0 @ ((unsigned)&WPUB*8)+0;
volatile bit WPUB1 @ ((unsigned)&WPUB*8)+1;
volatile bit WPUB2 @ ((unsigned)&WPUB*8)+2;
volatile bit WPUB3 @ ((unsigned)&WPUB*8)+3;
volatile bit WPUB4 @ ((unsigned)&WPUB*8)+4;
volatile bit WPUB5 @ ((unsigned)&WPUB*8)+5;
volatile bit WPUB6 @ ((unsigned)&WPUB*8)+6;
volatile bit WPUB7 @ ((unsigned)&WPUB*8)+7;


volatile bit WPUC0 @ ((unsigned)&WPUC*8)+0;
volatile bit WPUC1 @ ((unsigned)&WPUC*8)+1;
volatile bit WPUC2 @ ((unsigned)&WPUC*8)+2;
volatile bit WPUC3 @ ((unsigned)&WPUC*8)+3;
volatile bit WPUC4 @ ((unsigned)&WPUC*8)+4;
volatile bit WPUC5 @ ((unsigned)&WPUC*8)+5;
volatile bit WPUC6 @ ((unsigned)&WPUC*8)+6;
volatile bit WPUC7 @ ((unsigned)&WPUC*8)+7;


volatile bit WPUE0 @ ((unsigned)&WPUE*8)+0;
volatile bit WPUE1 @ ((unsigned)&WPUE*8)+1;
volatile bit WPUE2 @ ((unsigned)&WPUE*8)+2;
volatile bit WPUE3 @ ((unsigned)&WPUE*8)+3;


volatile bit IOCB0 @ ((unsigned)&IOCB*8)+0;
volatile bit IOCB1 @ ((unsigned)&IOCB*8)+1;
volatile bit IOCB2 @ ((unsigned)&IOCB*8)+2;
volatile bit IOCB3 @ ((unsigned)&IOCB*8)+3;
volatile bit IOCB4 @ ((unsigned)&IOCB*8)+4;
volatile bit IOCB5 @ ((unsigned)&IOCB*8)+5;
volatile bit IOCB6 @ ((unsigned)&IOCB*8)+6;
volatile bit IOCB7 @ ((unsigned)&IOCB*8)+7;

# 429
volatile bit ADFM @ ((unsigned)&ADCON1*8)+7;


volatile bit SWDTEN @ ((unsigned)&WDTCON*8)+0;



volatile bit ANS0 @ ((unsigned)&ANSEL*8)+0;
volatile bit ANS1 @ ((unsigned)&ANSEL*8)+1;
volatile bit ANS2 @ ((unsigned)&ANSEL*8)+2;
volatile bit ANS3 @ ((unsigned)&ANSEL*8)+3;
volatile bit ANS4 @ ((unsigned)&ANSEL*8)+4;
volatile bit ANS5 @ ((unsigned)&ANSEL*8)+5;
volatile bit ANS6 @ ((unsigned)&ANSEL*8)+6;
volatile bit ANS7 @ ((unsigned)&ANSEL*8)+7;


volatile bit ANS8 @ ((unsigned)&ANSELH*8)+0;
volatile bit ANS9 @ ((unsigned)&ANSELH*8)+1;
volatile bit ANS10 @ ((unsigned)&ANSELH*8)+2;
volatile bit ANS11 @ ((unsigned)&ANSELH*8)+3;
volatile bit ANS12 @ ((unsigned)&ANSELH*8)+4;
volatile bit ANS13 @ ((unsigned)&ANSELH*8)+5;


volatile bit RD @ ((unsigned)&EECON1*8)+0;
volatile bit WR @ ((unsigned)&EECON1*8)+1;
volatile bit WREN @ ((unsigned)&EECON1*8)+2;
volatile bit WRERR @ ((unsigned)&EECON1*8)+3;
volatile bit EEPGD @ ((unsigned)&EECON1*8)+7;


# 117 "C:\item\pan2416\PAN2416\±‡“Î∆˜\CMS_ID~1.03_\data\include\cms.h"
#pragma inline(_nop)
extern void _nop(void);

# 144
extern unsigned int flash_read(unsigned short addr);


# 217
#pragma inline(_delay)
extern void _delay(unsigned long);

# 7 "C:\item\pan2416\gitforpan2416\PAV03new\FWSWES-PAV03-SCENESWITCHES-PAN2416AV\src\delay.h"
extern void soft_delay_ms(unsigned int ms);

# 79 "C:\item\pan2416\gitforpan2416\PAV03new\FWSWES-PAV03-SCENESWITCHES-PAN2416AV\src\rf297l.h"
typedef enum{
UNKNOW_STATUS,
SENT_SUCCESS,
ACK_PAYLOAD_SENT_SUCCESS,
SENT_FAILURE,
}TX_RESULT_e;

extern unsigned char RF_ReadReg(unsigned char reg_addr);
extern void RF_WriteReg(unsigned char reg_addr, unsigned char write_data);
extern void RF_Write_Buff(unsigned char reg_addr,unsigned char *pBuff,unsigned char length);
extern void RF_Read_Buff(unsigned char reg_addr, unsigned char *pBuff, unsigned char length);
extern void RF_Set_TxMode(void);
extern void RF_Set_RxMode(void);
extern unsigned char RF_GetStatus(void);
extern void RF_ClearStatus(void);
extern void RF_ClearFIFO(void);
extern void RF_SetChannel(unsigned char Channel);
extern void RF_TxData(unsigned char *payload_buff,unsigned char length);
extern void RF_ENHANCE_TxData(unsigned char *payload_buff,unsigned char length,unsigned char *postback_buff);
extern unsigned char RF_RxData(unsigned char *payload_buff,unsigned char length);
extern unsigned char RF_ENHANCE_RxData(unsigned char *payload_buff,unsigned char length,unsigned char *postback_buff);

extern void RF_Init(void);
extern TX_RESULT_e RF_get_TX_result(void);
void RF_Sleep();
void RF_awaken();
void RF_Carrier(unsigned char Channel);

# 6 "C:\item\pan2416\gitforpan2416\PAV03new\FWSWES-PAV03-SCENESWITCHES-PAN2416AV\src\rf297L.c"
const unsigned char TX_ADDRESS_DEF[3] = {0xCC,0xCC,0xCC};
const unsigned char RX_ADDRESS_DEF[3] = {0x2D,0xD7,0XB9};


unsigned char RF_ReadReg(unsigned char reg_addr);
void RF_WriteReg(unsigned char reg_addr, unsigned char write_data);
void RF_Write_Buff(unsigned char reg_addr,unsigned char *pBuff,unsigned char length);
void RF_Read_Buff(unsigned char reg_addr, unsigned char *pBuff, unsigned char length);
void RF_Set_TxMode(void);
void RF_Set_RxMode(void);
unsigned char RF_GetStatus(void);
void RF_ClearStatus(void);
void RF_ClearFIFO(void);
void RF_SetChannel(unsigned char Channel);
void RF_TxData(unsigned char *payload_buff,unsigned char length);
unsigned char RF_Read_RxData(unsigned char *payload_buff,unsigned char length);
void RF_Init(void);
TX_RESULT_e RF_get_TX_result(void);

static unsigned char SPI_RW(unsigned char read_reg_addr);
static void SPI_init(void);


TX_RESULT_e RF_get_TX_result(void)
{
unsigned char status = 0;
status = RF_GetStatus();
if(status == 0X20){
return SENT_SUCCESS;
}else if(status == 0X60){
return ACK_PAYLOAD_SENT_SUCCESS;
}else if(0X10){
return SENT_FAILURE;
}else{
return UNKNOW_STATUS;
}
}

void RF_Init(void)
{

# 62
const unsigned char BB_cal_data[] = {0x0A,0x6D,0x67,0x9C,0x46};
const unsigned char RF_cal_data[] = {0x16,0x33,0x27};
const unsigned char RF_cal2_data[] = {0x45,0x21,0x3F,0x2D,0x5C,0x40};
const unsigned char Dem_cal_data[] = {0x01};
const unsigned char Dem_cal2_data[] = {0x0B,0xDF,0x02};

# 75
unsigned char feature = 0x00;
SPI_init();
RF_WriteReg(0x53, 0x5A);
RF_WriteReg(0x53, 0XA5);
RF_WriteReg(0xE1, 0);
RF_WriteReg(0xE2, 0);
RF_WriteReg(0x20 + 0x07, 0x70);
RF_WriteReg(0x20 + 0x02, 0x01);
RF_WriteReg(0x20 + 0x03, 0x01);
RF_WriteReg(0x20 + 0x05, 26);
RF_WriteReg(0x20 + 0x11, 18);
RF_Write_Buff(0x20 + 0x10, TX_ADDRESS_DEF, sizeof(TX_ADDRESS_DEF));
RF_Write_Buff(0x20 + 0x0A,RX_ADDRESS_DEF, sizeof(RX_ADDRESS_DEF));
RF_Write_Buff(0x20 + 0x1F, BB_cal_data, sizeof(BB_cal_data));
RF_Write_Buff(0x20 + 0x1A, RF_cal2_data, sizeof(RF_cal2_data));
RF_Write_Buff(0x20 + 0x19, Dem_cal_data, sizeof(Dem_cal_data));
RF_Write_Buff(0x20 + 0x1E, RF_cal_data, sizeof(RF_cal_data));
RF_Write_Buff(0x20 + 0x1B, Dem_cal2_data,sizeof(Dem_cal2_data));
RF_WriteReg(0x20 + 0x1C, 0x00);
RF_WriteReg(0x20 + 0x06, (0x0e |0X00));
RF_WriteReg(0x50, 0x73);

# 101
RF_WriteReg(0x20 + 0x04,0x00);
RF_WriteReg(0x20 + 0x01, 0x00);

# 113
if(18 >32){
feature |= 0x18;
}

RF_WriteReg(0x20 + 0x1D, feature);
}

# 133
unsigned char RF_RxData(unsigned char *payload_buff,unsigned char length)
{
if(!(RF_GetStatus() & 0X40))
{
return 0;
}
RF_Read_Buff(0x61, payload_buff, length);

RF_ClearFIFO();
RF_ClearStatus();
return 1;
}

# 159
unsigned char RF_ENHANCE_RxData(unsigned char *payload_buff,unsigned char length,unsigned char *postback_buff)
{
if(!(RF_GetStatus() & 0X40))
{
return 0;
}

# 172
RF_Read_Buff(0x61, payload_buff, length);


RF_ClearFIFO();
RF_ClearStatus();
return 1;
}

# 194
void RF_TxData(unsigned char *payload_buff,unsigned char length)
{
unsigned char ret;
RF_Write_Buff(0xA0, payload_buff, length);
soft_delay_ms(3);

RF_ClearFIFO();
RF_ClearStatus();
}

# 220
void RF_ENHANCE_TxData(unsigned char *payload_buff,unsigned char length,unsigned char *postback_buff)
{
unsigned char ret;
RF_Write_Buff(0xA0, payload_buff, length);
soft_delay_ms(2);

# 233
RF_ClearFIFO();
RF_ClearStatus();
}

void RF_SetChannel(unsigned char Channel)
{
RF_WriteReg(0x20 + 0x05, Channel);
}

void RF_ClearFIFO(void)
{
RF_WriteReg(0xE1, 0);
RF_WriteReg(0xE2, 0);
}

void RF_ClearStatus(void)
{
RF_WriteReg(0x20 + 0x07,0x70);
}

unsigned char RF_GetStatus(void)
{
return RF_ReadReg(0x07)&0x70;
}

void RF_Set_TxMode(void)
{
RF_WriteReg(0x20 + 0x00, 0X8E);
soft_delay_ms(10);
RA7=1;
soft_delay_ms(10);
}

void RF_Set_RxMode(void)
{
RF_WriteReg(0x20 + 0x00, 0X87);
soft_delay_ms(10);
RA7=1;
soft_delay_ms(10);
}

void RF_Read_Buff(unsigned char reg_addr, unsigned char *pBuff, unsigned char length)
{
unsigned char byte_ctr;
RE2=0;
SPI_RW(reg_addr);
for(byte_ctr=0;byte_ctr<length;byte_ctr++){
pBuff[byte_ctr] = SPI_RW(0);
}
RE2=1;
}

void RF_Write_Buff(unsigned char reg_addr,unsigned char *pBuff,unsigned char length)
{
unsigned char i;
RE2=0;
SPI_RW(reg_addr);
for(i=0;i<length;i++)
{
SPI_RW(pBuff[i]);
}
RE2=1;
}

void RF_WriteReg(unsigned char reg_addr, unsigned char write_data)
{
RE2=0;
SPI_RW(reg_addr);
SPI_RW(write_data);
RE2=1;
}

unsigned char RF_ReadReg(unsigned char reg_addr)
{
unsigned char tmp;
RE2=0;
SPI_RW(reg_addr);
tmp = SPI_RW(0);
RE2=1;
return tmp;
}

static void SPI_init(void)
{

TRISE2 =0;
TRISE1=0;
TRISA5=0;
TRISA7 = 0;

TRISA3 = 1;
TRISA4=1;
}

# 330
static unsigned char SPI_RW(unsigned char read_reg_addr)
{
unsigned char i;
for(i = 0; i < 8; i++)
{
RE1=0;
if(read_reg_addr & 0x80)
{
RA5=1;
}
else
{
RA5=0;
}
read_reg_addr = read_reg_addr << 1;
RE1=1;
if( RA4 )
{
read_reg_addr = read_reg_addr | 0x01;
}
}
RE1=0;
return read_reg_addr;
}




void RF_Sleep()
{
unsigned char reg_config;
reg_config = RF_ReadReg(0x00);
RF_WriteReg(0x20 + 0x00, reg_config & (~(0x02)));
RA7=0;
}

# 370
void RF_awaken()
{
unsigned char reg_config;
reg_config = RF_ReadReg(0x00);
RF_WriteReg(0x20 + 0x00, reg_config | 0x02);
RA7=1;
soft_delay_ms(7);
}




void RF_Carrier(unsigned char Channel)
{
const unsigned char BB_cal_data[] = {0x0A,0x6D,0x67,0x9C,0x46};
const unsigned char RF_cal_data[] = {0x16,0x33,0x27};
const unsigned char RF_cal2_data[] = {0x45,0x21,0x3F,0x2D,0x5C,0x40};
const unsigned char Dem_cal_data[] = {0xE1};
const unsigned char Dem_cal2_data[] = {0x0B,0xDF,0x02};
RA7=0;
soft_delay_ms(1);
RF_WriteReg(0x20 + 0x00, 0X8e);
RF_WriteReg(0x20 + 0x05, Channel);
RF_WriteReg(0x20 + 0x06, (0x0e |0X00));
RF_Write_Buff(0x20 + 0x1F, BB_cal_data, sizeof(BB_cal_data));
RF_Write_Buff(0x20 + 0x1A, RF_cal2_data, sizeof(RF_cal2_data));
RF_Write_Buff(0x20 + 0x19, Dem_cal_data, sizeof(Dem_cal_data));
RF_Write_Buff(0x20 + 0x1E, RF_cal_data, sizeof(RF_cal_data));
RF_Write_Buff(0x20 + 0x1B, Dem_cal2_data,sizeof(Dem_cal2_data));
soft_delay_ms(1);
}

