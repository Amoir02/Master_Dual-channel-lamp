
# 1 "D:\Work\project\PAV03-master\FWTRX-PAVTR-SERIALTR-PAN2416AV\src\recive.c"

# 18 "D:\Work\file\PAN\PAN2416\±‡“Î∆˜\CMS_IDE_V1.41.03_CRC_PANCHIP\data\include\cms89f228.h"
volatile unsigned char INDF @ 0x000;
volatile unsigned char TMR0 @ 0x001;
volatile unsigned char PCL @ 0x002;
volatile unsigned char STATUS @ 0x003;
volatile unsigned char FSR @ 0x004;
volatile unsigned char PORTA @ 0x005;
volatile unsigned char PORTB @ 0x006;
volatile unsigned char PORTC @ 0x007;

volatile unsigned char PORTE @ 0x009;
volatile unsigned char PCLATH @ 0x00A;
volatile unsigned char INTCON @ 0x00B;
volatile unsigned char PIR1 @ 0x00C;
volatile unsigned char PIR2 @ 0x00D;
volatile unsigned char TMR1L @ 0x00E;
volatile unsigned char TMR1H @ 0x00F;
volatile unsigned char T1CON @ 0x010;
volatile unsigned char TMR2 @ 0x011;
volatile unsigned char T2CON @ 0x012;
volatile unsigned char SSPBUF @ 0x013;
volatile unsigned char SSPCON @ 0x014;
volatile unsigned char CCPR1L @ 0x015;
volatile unsigned char CCPR1H @ 0x016;
volatile unsigned char CCP1CON @ 0x017;

# 47
volatile unsigned char CCPR2L @ 0x01B;
volatile unsigned char CCPR2H @ 0x01C;
volatile unsigned char CCP2CON @ 0x01D;
volatile unsigned char ADRESH @ 0x01E;
volatile unsigned char ADCON0 @ 0x01F;
volatile unsigned char OPTION_REG @ 0x081;
volatile unsigned char TRISA @ 0x085;
volatile unsigned char TRISB @ 0x086;
volatile unsigned char TRISC @ 0x087;
volatile unsigned char TRISE @ 0x089;
volatile unsigned char PIE1 @ 0x08C;
volatile unsigned char PIE2 @ 0x08D;

volatile unsigned char OSCCON @ 0x08F;
volatile unsigned char OSCTUNE @ 0x090;
volatile unsigned char SSPCON2 @ 0x091;
volatile unsigned char PR2 @ 0x092;
volatile unsigned char SSPADD @ 0x093;
volatile unsigned char SSPSTAT @ 0x094;
volatile unsigned char WPUB @ 0x095;
volatile unsigned char IOCB @ 0x096;

# 74
volatile unsigned char ADRESL @ 0x09E;
volatile unsigned char ADCON1 @ 0x09F;
volatile unsigned char WDTCON @ 0x105;




volatile unsigned char EEDAT @ 0x10C;
volatile unsigned char EEDATA @ 0x10C;
volatile unsigned char EEADR @ 0x10D;
volatile unsigned char EEADRL @ 0x10D;
volatile unsigned char EEDATH @ 0x10E;
volatile unsigned char EEADRH @ 0x10F;

volatile unsigned char TABLE_SPH @ 0x110;
volatile unsigned char TABLE_SPL @ 0x111;
volatile unsigned char TABLE_DATAH @ 0x112;

# 99
volatile unsigned char WPUE @ 0x11A;
volatile unsigned char OPA0CON @ 0x11C;
volatile unsigned char OPA0ADJ @ 0x11D;



volatile unsigned char ANSEL @ 0x188;
volatile unsigned char ANSELH @ 0x189;

volatile unsigned char EECON1 @ 0x18C;
volatile unsigned char EECON2 @ 0x18D;
volatile unsigned char WPUA @ 0x18E;
volatile unsigned char WPUC @ 0x18F;

volatile unsigned char LEDCON0 @ 0x190;
volatile unsigned char LEDCON1 @ 0x191;
volatile unsigned char LEDADD @ 0x192;
volatile unsigned char LEDDATA @ 0x193;
volatile unsigned char LCDCON0 @ 0x190;
volatile unsigned char LCDCON1 @ 0x191;
volatile unsigned char LCDADD @ 0x192;
volatile unsigned char LCDDATA @ 0x193;
volatile unsigned char SEGEN2 @ 0x194;
volatile unsigned char SEGEN1 @ 0x195;
volatile unsigned char SEGEN0 @ 0x196;
volatile unsigned char COMEN @ 0x197;



volatile bit CARRY @ ((unsigned)&STATUS*8)+0;
volatile bit DC @ ((unsigned)&STATUS*8)+1;
volatile bit ZERO @ ((unsigned)&STATUS*8)+2;
volatile bit PD @ ((unsigned)&STATUS*8)+3;
volatile bit TO @ ((unsigned)&STATUS*8)+4;
volatile bit IRP @ ((unsigned)&STATUS*8)+7;


volatile bit RA0 @ ((unsigned)&PORTA*8)+0;
volatile bit RA1 @ ((unsigned)&PORTA*8)+1;
volatile bit RA2 @ ((unsigned)&PORTA*8)+2;
volatile bit RA3 @ ((unsigned)&PORTA*8)+3;
volatile bit RA4 @ ((unsigned)&PORTA*8)+4;
volatile bit RA5 @ ((unsigned)&PORTA*8)+5;
volatile bit RA6 @ ((unsigned)&PORTA*8)+6;
volatile bit RA7 @ ((unsigned)&PORTA*8)+7;


volatile bit RB0 @ ((unsigned)&PORTB*8)+0;
volatile bit RB1 @ ((unsigned)&PORTB*8)+1;
volatile bit RB2 @ ((unsigned)&PORTB*8)+2;
volatile bit RB3 @ ((unsigned)&PORTB*8)+3;
volatile bit RB4 @ ((unsigned)&PORTB*8)+4;
volatile bit RB5 @ ((unsigned)&PORTB*8)+5;
volatile bit RB6 @ ((unsigned)&PORTB*8)+6;
volatile bit RB7 @ ((unsigned)&PORTB*8)+7;


volatile bit RC0 @ ((unsigned)&PORTC*8)+0;
volatile bit RC1 @ ((unsigned)&PORTC*8)+1;
volatile bit RC2 @ ((unsigned)&PORTC*8)+2;
volatile bit RC3 @ ((unsigned)&PORTC*8)+3;
volatile bit RC4 @ ((unsigned)&PORTC*8)+4;
volatile bit RC5 @ ((unsigned)&PORTC*8)+5;
volatile bit RC6 @ ((unsigned)&PORTC*8)+6;
volatile bit RC7 @ ((unsigned)&PORTC*8)+7;


volatile bit RE0 @ ((unsigned)&PORTE*8)+0;
volatile bit RE1 @ ((unsigned)&PORTE*8)+1;
volatile bit RE2 @ ((unsigned)&PORTE*8)+2;
volatile bit RE3 @ ((unsigned)&PORTE*8)+3;


volatile bit RBIF @ ((unsigned)&INTCON*8)+0;

volatile bit RABIF @ ((unsigned)&INTCON*8)+0;
volatile bit INTF @ ((unsigned)&INTCON*8)+1;
volatile bit T0IF @ ((unsigned)&INTCON*8)+2;
volatile bit RBIE @ ((unsigned)&INTCON*8)+3;

volatile bit RABIE @ ((unsigned)&INTCON*8)+3;
volatile bit INTE @ ((unsigned)&INTCON*8)+4;
volatile bit T0IE @ ((unsigned)&INTCON*8)+5;
volatile bit PEIE @ ((unsigned)&INTCON*8)+6;
volatile bit GIE @ ((unsigned)&INTCON*8)+7;


volatile bit TMR1IF @ ((unsigned)&PIR1*8)+0;
volatile bit TMR2IF @ ((unsigned)&PIR1*8)+1;
volatile bit CCP1IF @ ((unsigned)&PIR1*8)+2;
volatile bit SSPIF @ ((unsigned)&PIR1*8)+3;
volatile bit TXIF @ ((unsigned)&PIR1*8)+4;
volatile bit RCIF @ ((unsigned)&PIR1*8)+5;
volatile bit ADIF @ ((unsigned)&PIR1*8)+6;


volatile bit CCP2IF @ ((unsigned)&PIR2*8)+0;
volatile bit BCLIF @ ((unsigned)&PIR2*8)+3;
volatile bit EEIF @ ((unsigned)&PIR2*8)+4;
volatile bit C1IF @ ((unsigned)&PIR2*8)+5;
volatile bit C2IF @ ((unsigned)&PIR2*8)+6;


volatile bit TMR1ON @ ((unsigned)&T1CON*8)+0;
volatile bit TMR1CS @ ((unsigned)&T1CON*8)+1;
volatile bit T1SYNC @ ((unsigned)&T1CON*8)+2;
volatile bit T1OSCEN @ ((unsigned)&T1CON*8)+3;
volatile bit T1CKPS0 @ ((unsigned)&T1CON*8)+4;
volatile bit T1CKPS1 @ ((unsigned)&T1CON*8)+5;
volatile bit TMR1GE @ ((unsigned)&T1CON*8)+6;
volatile bit T1GINV @ ((unsigned)&T1CON*8)+7;


volatile bit T2CKPS0 @ ((unsigned)&T2CON*8)+0;
volatile bit T2CKPS1 @ ((unsigned)&T2CON*8)+1;
volatile bit TMR2ON @ ((unsigned)&T2CON*8)+2;
volatile bit TOUTPS0 @ ((unsigned)&T2CON*8)+3;
volatile bit TOUTPS1 @ ((unsigned)&T2CON*8)+4;
volatile bit TOUTPS2 @ ((unsigned)&T2CON*8)+5;
volatile bit TOUTPS3 @ ((unsigned)&T2CON*8)+6;


volatile bit SSPM0 @ ((unsigned)&SSPCON*8)+0;
volatile bit SSPM1 @ ((unsigned)&SSPCON*8)+1;
volatile bit SSPM2 @ ((unsigned)&SSPCON*8)+2;
volatile bit SSPM3 @ ((unsigned)&SSPCON*8)+3;
volatile bit CKP @ ((unsigned)&SSPCON*8)+4;
volatile bit SSPEN @ ((unsigned)&SSPCON*8)+5;
volatile bit SSPOV @ ((unsigned)&SSPCON*8)+6;
volatile bit WCOL @ ((unsigned)&SSPCON*8)+7;


volatile bit CCP1M0 @ ((unsigned)&CCP1CON*8)+0;
volatile bit CCP1M1 @ ((unsigned)&CCP1CON*8)+1;
volatile bit CCP1M2 @ ((unsigned)&CCP1CON*8)+2;
volatile bit CCP1M3 @ ((unsigned)&CCP1CON*8)+3;
volatile bit DC1B0 @ ((unsigned)&CCP1CON*8)+4;
volatile bit DC1B1 @ ((unsigned)&CCP1CON*8)+5;
volatile bit P1M0 @ ((unsigned)&CCP1CON*8)+6;
volatile bit P1M1 @ ((unsigned)&CCP1CON*8)+7;

# 251
volatile bit CCP2M0 @ ((unsigned)&CCP2CON*8)+0;
volatile bit CCP2M1 @ ((unsigned)&CCP2CON*8)+1;
volatile bit CCP2M2 @ ((unsigned)&CCP2CON*8)+2;
volatile bit CCP2M3 @ ((unsigned)&CCP2CON*8)+3;
volatile bit DC2B0 @ ((unsigned)&CCP2CON*8)+4;
volatile bit DC2B1 @ ((unsigned)&CCP2CON*8)+5;
volatile bit CCP2IN0 @ ((unsigned)&CCP2CON*8)+6;
volatile bit CCP2IN1 @ ((unsigned)&CCP2CON*8)+7;


volatile bit ADON @ ((unsigned)&ADCON0*8)+0;
volatile bit GODONE @ ((unsigned)&ADCON0*8)+1;
volatile bit CHS0 @ ((unsigned)&ADCON0*8)+2;
volatile bit CHS1 @ ((unsigned)&ADCON0*8)+3;
volatile bit CHS2 @ ((unsigned)&ADCON0*8)+4;
volatile bit CHS3 @ ((unsigned)&ADCON0*8)+5;
volatile bit ADCS0 @ ((unsigned)&ADCON0*8)+6;
volatile bit ADCS1 @ ((unsigned)&ADCON0*8)+7;


volatile bit PS0 @ ((unsigned)&OPTION_REG*8)+0;
volatile bit PS1 @ ((unsigned)&OPTION_REG*8)+1;
volatile bit PS2 @ ((unsigned)&OPTION_REG*8)+2;
volatile bit PSA @ ((unsigned)&OPTION_REG*8)+3;
volatile bit T0SE @ ((unsigned)&OPTION_REG*8)+4;
volatile bit T0CS @ ((unsigned)&OPTION_REG*8)+5;
volatile bit INTEDG @ ((unsigned)&OPTION_REG*8)+6;
volatile bit RBPU @ ((unsigned)&OPTION_REG*8)+7;

volatile bit RABPU @ ((unsigned)&OPTION_REG*8)+7;


volatile bit TRISA0 @ ((unsigned)&TRISA*8)+0;
volatile bit TRISA1 @ ((unsigned)&TRISA*8)+1;
volatile bit TRISA2 @ ((unsigned)&TRISA*8)+2;
volatile bit TRISA3 @ ((unsigned)&TRISA*8)+3;
volatile bit TRISA4 @ ((unsigned)&TRISA*8)+4;
volatile bit TRISA5 @ ((unsigned)&TRISA*8)+5;
volatile bit TRISA6 @ ((unsigned)&TRISA*8)+6;
volatile bit TRISA7 @ ((unsigned)&TRISA*8)+7;


volatile bit TRISB0 @ ((unsigned)&TRISB*8)+0;
volatile bit TRISB1 @ ((unsigned)&TRISB*8)+1;
volatile bit TRISB2 @ ((unsigned)&TRISB*8)+2;
volatile bit TRISB3 @ ((unsigned)&TRISB*8)+3;
volatile bit TRISB4 @ ((unsigned)&TRISB*8)+4;
volatile bit TRISB5 @ ((unsigned)&TRISB*8)+5;
volatile bit TRISB6 @ ((unsigned)&TRISB*8)+6;
volatile bit TRISB7 @ ((unsigned)&TRISB*8)+7;


volatile bit TRISC0 @ ((unsigned)&TRISC*8)+0;
volatile bit TRISC1 @ ((unsigned)&TRISC*8)+1;
volatile bit TRISC2 @ ((unsigned)&TRISC*8)+2;
volatile bit TRISC3 @ ((unsigned)&TRISC*8)+3;
volatile bit TRISC4 @ ((unsigned)&TRISC*8)+4;
volatile bit TRISC5 @ ((unsigned)&TRISC*8)+5;
volatile bit TRISC6 @ ((unsigned)&TRISC*8)+6;
volatile bit TRISC7 @ ((unsigned)&TRISC*8)+7;



volatile bit TRISE0 @ ((unsigned)&TRISE*8)+0;
volatile bit TRISE1 @ ((unsigned)&TRISE*8)+1;
volatile bit TRISE2 @ ((unsigned)&TRISE*8)+2;
volatile bit TRISE3 @ ((unsigned)&TRISE*8)+3;


volatile bit TMR1IE @ ((unsigned)&PIE1*8)+0;
volatile bit TMR2IE @ ((unsigned)&PIE1*8)+1;
volatile bit CCP1IE @ ((unsigned)&PIE1*8)+2;
volatile bit SSPIE @ ((unsigned)&PIE1*8)+3;
volatile bit TXIE @ ((unsigned)&PIE1*8)+4;
volatile bit RCIE @ ((unsigned)&PIE1*8)+5;
volatile bit ADIE @ ((unsigned)&PIE1*8)+6;


volatile bit CCP2IE @ ((unsigned)&PIE2*8)+0;
volatile bit BCLIE @ ((unsigned)&PIE2*8)+3;
volatile bit EEIE @ ((unsigned)&PIE2*8)+4;
volatile bit C1IE @ ((unsigned)&PIE2*8)+5;
volatile bit C2IE @ ((unsigned)&PIE2*8)+6;



volatile bit SCS @ ((unsigned)&OSCCON*8)+0;
volatile bit IRCF0 @ ((unsigned)&OSCCON*8)+4;
volatile bit IRCF1 @ ((unsigned)&OSCCON*8)+5;
volatile bit IRCF2 @ ((unsigned)&OSCCON*8)+6;


volatile bit TUN0 @ ((unsigned)&OSCTUNE*8)+0;
volatile bit TUN1 @ ((unsigned)&OSCTUNE*8)+1;
volatile bit TUN2 @ ((unsigned)&OSCTUNE*8)+2;
volatile bit TUN3 @ ((unsigned)&OSCTUNE*8)+3;
volatile bit TUN4 @ ((unsigned)&OSCTUNE*8)+4;


volatile bit SEN @ ((unsigned)&SSPCON2*8)+0;
volatile bit RSEN @ ((unsigned)&SSPCON2*8)+1;
volatile bit PEN @ ((unsigned)&SSPCON2*8)+2;
volatile bit RCEN @ ((unsigned)&SSPCON2*8)+3;
volatile bit ACKEN @ ((unsigned)&SSPCON2*8)+4;
volatile bit ACKDT @ ((unsigned)&SSPCON2*8)+5;
volatile bit ACKSTAT @ ((unsigned)&SSPCON2*8)+6;
volatile bit GCEN @ ((unsigned)&SSPCON2*8)+7;


volatile bit BF @ ((unsigned)&SSPSTAT*8)+0;
volatile bit UA @ ((unsigned)&SSPSTAT*8)+1;
volatile bit RW @ ((unsigned)&SSPSTAT*8)+2;
volatile bit START @ ((unsigned)&SSPSTAT*8)+3;
volatile bit STOP @ ((unsigned)&SSPSTAT*8)+4;
volatile bit DA @ ((unsigned)&SSPSTAT*8)+5;
volatile bit CKE @ ((unsigned)&SSPSTAT*8)+6;
volatile bit SMP @ ((unsigned)&SSPSTAT*8)+7;


volatile bit WPUA0 @ ((unsigned)&WPUA*8)+0;
volatile bit WPUA1 @ ((unsigned)&WPUA*8)+1;
volatile bit WPUA2 @ ((unsigned)&WPUA*8)+2;
volatile bit WPUA3 @ ((unsigned)&WPUA*8)+3;
volatile bit WPUA4 @ ((unsigned)&WPUA*8)+4;
volatile bit WPUA5 @ ((unsigned)&WPUA*8)+5;
volatile bit WPUA6 @ ((unsigned)&WPUA*8)+6;
volatile bit WPUA7 @ ((unsigned)&WPUA*8)+7;


volatile bit WPUB0 @ ((unsigned)&WPUB*8)+0;
volatile bit WPUB1 @ ((unsigned)&WPUB*8)+1;
volatile bit WPUB2 @ ((unsigned)&WPUB*8)+2;
volatile bit WPUB3 @ ((unsigned)&WPUB*8)+3;
volatile bit WPUB4 @ ((unsigned)&WPUB*8)+4;
volatile bit WPUB5 @ ((unsigned)&WPUB*8)+5;
volatile bit WPUB6 @ ((unsigned)&WPUB*8)+6;
volatile bit WPUB7 @ ((unsigned)&WPUB*8)+7;


volatile bit WPUC0 @ ((unsigned)&WPUC*8)+0;
volatile bit WPUC1 @ ((unsigned)&WPUC*8)+1;
volatile bit WPUC2 @ ((unsigned)&WPUC*8)+2;
volatile bit WPUC3 @ ((unsigned)&WPUC*8)+3;
volatile bit WPUC4 @ ((unsigned)&WPUC*8)+4;
volatile bit WPUC5 @ ((unsigned)&WPUC*8)+5;
volatile bit WPUC6 @ ((unsigned)&WPUC*8)+6;
volatile bit WPUC7 @ ((unsigned)&WPUC*8)+7;


volatile bit WPUE0 @ ((unsigned)&WPUE*8)+0;
volatile bit WPUE1 @ ((unsigned)&WPUE*8)+1;
volatile bit WPUE2 @ ((unsigned)&WPUE*8)+2;
volatile bit WPUE3 @ ((unsigned)&WPUE*8)+3;


volatile bit IOCB0 @ ((unsigned)&IOCB*8)+0;
volatile bit IOCB1 @ ((unsigned)&IOCB*8)+1;
volatile bit IOCB2 @ ((unsigned)&IOCB*8)+2;
volatile bit IOCB3 @ ((unsigned)&IOCB*8)+3;
volatile bit IOCB4 @ ((unsigned)&IOCB*8)+4;
volatile bit IOCB5 @ ((unsigned)&IOCB*8)+5;
volatile bit IOCB6 @ ((unsigned)&IOCB*8)+6;
volatile bit IOCB7 @ ((unsigned)&IOCB*8)+7;

# 429
volatile bit ADFM @ ((unsigned)&ADCON1*8)+7;


volatile bit SWDTEN @ ((unsigned)&WDTCON*8)+0;



volatile bit ANS0 @ ((unsigned)&ANSEL*8)+0;
volatile bit ANS1 @ ((unsigned)&ANSEL*8)+1;
volatile bit ANS2 @ ((unsigned)&ANSEL*8)+2;
volatile bit ANS3 @ ((unsigned)&ANSEL*8)+3;
volatile bit ANS4 @ ((unsigned)&ANSEL*8)+4;
volatile bit ANS5 @ ((unsigned)&ANSEL*8)+5;
volatile bit ANS6 @ ((unsigned)&ANSEL*8)+6;
volatile bit ANS7 @ ((unsigned)&ANSEL*8)+7;


volatile bit ANS8 @ ((unsigned)&ANSELH*8)+0;
volatile bit ANS9 @ ((unsigned)&ANSELH*8)+1;
volatile bit ANS10 @ ((unsigned)&ANSELH*8)+2;
volatile bit ANS11 @ ((unsigned)&ANSELH*8)+3;
volatile bit ANS12 @ ((unsigned)&ANSELH*8)+4;
volatile bit ANS13 @ ((unsigned)&ANSELH*8)+5;


volatile bit RD @ ((unsigned)&EECON1*8)+0;
volatile bit WR @ ((unsigned)&EECON1*8)+1;
volatile bit WREN @ ((unsigned)&EECON1*8)+2;
volatile bit WRERR @ ((unsigned)&EECON1*8)+3;
volatile bit EEPGD @ ((unsigned)&EECON1*8)+7;


# 117 "D:\Work\file\PAN\PAN2416\±‡“Î∆˜\CMS_IDE_V1.41.03_CRC_PANCHIP\data\include\cms.h"
#pragma inline(_nop)
extern void _nop(void);

# 144
extern unsigned int flash_read(unsigned short addr);

# 41 "D:\Work\file\PAN\PAN2416\±‡“Î∆˜\CMS_IDE_V1.41.03_CRC_PANCHIP\data\include\eeprom_routines.h"
extern unsigned char eeprom_write(unsigned char addr, unsigned char value);
extern unsigned char eeprom_read(unsigned char addr);
extern void eecpymem(volatile unsigned char *to, eeprom unsigned char *from, unsigned char size);
extern void memcpyee(eeprom unsigned char *to, const unsigned char *from, unsigned char size);


# 217 "D:\Work\file\PAN\PAN2416\±‡“Î∆˜\CMS_IDE_V1.41.03_CRC_PANCHIP\data\include\cms.h"
#pragma inline(_delay)
extern void _delay(unsigned long);

# 15 "D:\Work\project\PAV03-master\FWTRX-PAVTR-SERIALTR-PAN2416AV\src\recive.h"
unsigned short UpdateCRC(unsigned char *CRC_input, unsigned int len);
unsigned char rx_data(void);
void channel_set(unsigned char channel_num, unsigned char status);
void recive_task(void);
void delay_task(void);

# 79 "D:\Work\project\PAV03-master\FWTRX-PAVTR-SERIALTR-PAN2416AV\src\rf297L.h"
typedef enum{
UNKNOW_STATUS,
SENT_SUCCESS,
ACK_PAYLOAD_SENT_SUCCESS,
SENT_FAILURE,
}TX_RESULT_e;

extern unsigned char RF_ReadReg(unsigned char reg_addr);
extern void RF_WriteReg(unsigned char reg_addr, unsigned char write_data);
extern void RF_Write_Buff(unsigned char reg_addr,unsigned char *pBuff,unsigned char length);
extern void RF_Read_Buff(unsigned char reg_addr, unsigned char *pBuff, unsigned char length);
extern void RF_Set_TxMode(void);
extern void RF_Set_RxMode(void);
extern unsigned char RF_GetStatus(void);
extern void RF_ClearStatus(void);
extern void RF_ClearFIFO(void);
extern void RF_SetChannel(unsigned char Channel);
extern void RF_TxData(unsigned char *payload_buff,unsigned char length);
extern void RF_ENHANCE_TxData(unsigned char *payload_buff,unsigned char length,unsigned char *postback_buff);
extern unsigned char RF_RxData(unsigned char *payload_buff,unsigned char length);
extern unsigned char RF_ENHANCE_RxData(unsigned char *payload_buff,unsigned char length,unsigned char *postback_buff);

extern void RF_Init(void);
extern TX_RESULT_e RF_get_TX_result(void);
void RF_Sleep();
void RF_awaken();
void RF_Carrier(unsigned char Channel);

# 7 "D:\Work\project\PAV03-master\FWTRX-PAVTR-SERIALTR-PAN2416AV\src\e2prom.h"
void AT24C02_Write_Msg(unsigned char addr ,unsigned char *data,unsigned char len);
void AT24C02_Read_Msg(unsigned char addr,unsigned char *data,unsigned char len);
unsigned char AT24C02_Read_Byte(unsigned char addr);
void AT24C02_Write_Byte(unsigned char addr ,unsigned char data);

# 7 "D:\Work\project\PAV03-master\FWTRX-PAVTR-SERIALTR-PAN2416AV\src\delay.h"
extern void soft_delay_ms(unsigned int ms);

# 8 "D:\Work\project\PAV03-master\FWTRX-PAVTR-SERIALTR-PAN2416AV\src\key_scan.h"
typedef struct
{
unsigned char channel_status;

unsigned char key_flag_3s;

unsigned char key_flag_5s;

}channel_flag_stu;



extern void key_Init(void);
extern void key_scan(void);
void key_value_read(void);

# 9 "D:\Work\project\PAV03-master\FWTRX-PAVTR-SERIALTR-PAN2416AV\src\system.h"
typedef enum{
CPU_FREQUENCY_EXTERNAL = 0x00,
CPU_FREQUENCY_31K = 0x01,
CPU_FREQUENCY_125K = 0x11,
CPU_FREQUENCY_250K = 0x21,
CPU_FREQUENCY_500K = 0x31,
CPU_FREQUENCY_1M = 0x41,
CPU_FREQUENCY_2M = 0x51,
CPU_FREQUENCY_4M = 0x61,
CPU_FREQUENCY_8M = 0x71
}CPU_FREQUENCY_e;

typedef enum{
PORTB_CHANGE_ISR_ENABLE = 0x80,
INT0_ISR_ENABLE = 0x10,
TIMER0_ISR_ENABLE = 0x20,
TIMER1_ISR_ENABLE = 0x01,
TIMER2_ISR_ENABLE = 0x02,
ADC_ISR_ENABLE = 0x40,
}INT_ENABLE_FLAG_e;

typedef enum{
PORTB_CHANGE_ISR_TOUCH = 0x01,
INT0_ISR_TOUCH = 0x02,
TIMER0_ISR_TOUCH = 0x04,
TIMER1_ISR_TOUCH = 0x01,
TIMER2_ISR_TOUCH = 0x02,
ADC_ISR_TOUCH = 0x40,
}INT_TOUCH_FLAG_e;

extern void Interrupt_init(void);
extern void soft_delay_ms(unsigned int ms);
extern void system_set_CPU_frequency(CPU_FREQUENCY_e CPU_Frequency);
extern void clear_interrupt_flag(void);
extern void system_to_sleep(void);
extern void Enable_Interrupt(void);
extern void Disable_Interrupt(void);
extern void System_sleep_mode(void);
extern void Delay_us(unsigned int us);
extern void send(unsigned char uContent);

# 4 "D:\Work\file\PAN\PAN2416\±‡“Î∆˜\CMS_IDE_V1.41.03_CRC_PANCHIP\data\include\string.h"
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;


extern int errno;

# 22
extern void * memcpy(void *, const void *, size_t);
extern void * memmove(void *, const void *, size_t);
extern void * memset(void *, int, size_t);

# 35
extern char * strcat(char *, const char *);
extern char * strcpy(char *, const char *);
extern char * strncat(char *, const char *, size_t);
extern char * strncpy(char *, const char *, size_t);
extern char * strdup(const char *);
extern char * strtok(char *, const char *);


extern int memcmp(const void *, const void *, size_t);
extern int strcmp(const char *, const char *);
extern int stricmp(const char *, const char *);
extern int strncmp(const char *, const char *, size_t);
extern int strnicmp(const char *, const char *, size_t);
extern void * memchr(const void *, int, size_t);
extern size_t strcspn(const char *, const char *);
extern char * strpbrk(const char *, const char *);
extern size_t strspn(const char *, const char *);
extern char * strstr(const char *, const char *);
extern char * stristr(const char *, const char *);
extern char * strerror(int);
extern size_t strlen(const char *);
extern char * strchr(const char *, int);
extern char * strichr(const char *, int);
extern char * strrchr(const char *, int);
extern char * strrichr(const char *, int);

# 8 "D:\Work\project\PAV03-master\FWTRX-PAVTR-SERIALTR-PAN2416AV\src\recive.c"
const unsigned char crc_2_4G_lib[21]={0xc7 ,0x8d ,0xd2 ,0x57 ,0xa1 ,0x3d ,0xa7 ,0x66 ,0xb0 ,0x75 ,0x31 ,0x11 ,0x48 ,0x96 ,0x77 ,0xf8 ,0xe3 ,0x46 ,0xe9,0xab ,0xd0 };
const unsigned char crc_lab[16]={0x41,0x92,0x53,0x2A,0xFC,0xAB,0xCE,0x26,0x0D,0x1E,0x99,0x78,0x00,0x22,0x99,0xDE};
const unsigned char ble_crc_38[42]={
0xD6, 0xC5, 0x44, 0x20, 0x59,
0xDE, 0xE1, 0x8F, 0x1B, 0xA5,
0xAF, 0x42, 0x7B, 0x4E, 0xCD,
0x60, 0xEB, 0x62, 0x22, 0x90,
0x2C, 0xEF, 0xF0, 0xC7, 0x8D,
0xD2, 0x57, 0xA1, 0x3D, 0xA7,
0x66, 0xB0, 0x75, 0x31, 0x11,
0x48, 0x96, 0x77 ,0xF8, 0xE3,
0x46, 0xE9
};
const unsigned char AdvData_3[3]={0xAA ,0x55 ,0x11};
unsigned char AdvData_23[20]={0};

unsigned char rf_buf[18] = {0};

unsigned char sys_stute = 1;
unsigned int flag_5s_add=0;

extern unsigned char channel_flag[3];
extern unsigned char key_long_flag;
extern channel_flag_stu KEY0;
extern channel_flag_stu KEY1;
extern channel_flag_stu KEY2;
unsigned char channel_delay[3]={0,0,0};
extern unsigned int flag_5min_add;

extern unsigned char KEY0_FLAG;
extern unsigned char KEY1_FLAG;
extern unsigned char KEY2_FLAG;
static unsigned char delay_flag=0;

static signed long frame_count = -1;

unsigned short UpdateCRC(unsigned char *CRC_input, unsigned int len)
{
unsigned char i,k = 0;
unsigned short CRC_acc=0x5555;

while (len--)
{
CRC_acc = CRC_acc ^ (CRC_input[k++] << 8);

for (i = 0; i < 8; i++)
{
if ((CRC_acc & 0x8000) == 0x8000)
{
CRC_acc = CRC_acc << 1;
CRC_acc ^= 0x1021;
}
else
{
CRC_acc = CRC_acc << 1;
}
}
}
return CRC_acc;
}



unsigned char rx_data(void)
{
unsigned char rx_flag=0;
unsigned char rand=0;
unsigned char i=0;
unsigned int crc18=0;
unsigned int crc16=0;
unsigned char diff_frame = 0;

if (RF_RxData(rf_buf,18))
{



for(i = 0;i < 18; i++)
{
rf_buf[i]=rf_buf[i]^crc_2_4G_lib[3+i]^ble_crc_38[21+i];
}

crc16 = rf_buf[16] + rf_buf[17] * 256;


for (i = 0; i < 16; i++)
{
rf_buf[i]=rf_buf[i]^crc_lab[i];
}


rand = rf_buf[0];

for (i = 1; i < 16; i++)
{
rf_buf[i] ^= rand;
}

if (crc16 != UpdateCRC(rf_buf, 16))
{
rx_flag = 0;
return rx_flag;
}

if (frame_count != rf_buf[0])
{
frame_count = rf_buf[0];

rx_flag = 1;

memcpy(AdvData_23, AdvData_3, 3);
memcpy(AdvData_23 + 3, &rf_buf[1], 15);

crc18 = UpdateCRC(AdvData_23 + 2, 16);
AdvData_23[18] = crc18 & 0xff;
AdvData_23[19] = ((crc18 >> 8) & 0xff);

for (i=0; i < 20; i++)
{
send(AdvData_23[i]);
}
}
else
{
rx_flag = 0;
}

# 144
}
return rx_flag;
}



extern unsigned char match_channel_flag;
void recive_task(void)
{
if (rx_data())
{

RF_ClearFIFO();
RF_ClearStatus();
}
}


void channel_set(unsigned char channel_num, unsigned char status)
{
switch(channel_num)
{
case 0 :
{
if(status)
{
TRISB6=0;
RB6=1;
}
else
{
TRISB6=0;
RB6=0;
}
}break;
case 1:
{
if(status)
{
TRISB5=0;
RB5=1;
}
else
{
TRISB5=0;
RB5=0;
}
}break;
case 2:
{
if(status)
{
TRISB4=0;
RB4=1;
}
else
{
TRISB4=0;
RB4=0;
}
}break;
}
}

void delay_task(void)
{

if(channel_delay[0]!=0)
{
if(delay_flag==0)delay_flag=1;
if(channel_delay[2]>0)
{
if(flag_5min_add>=30000)
{
flag_5min_add=0;
channel_delay[2]--;
}
}
else
{
switch(channel_delay[0])
{
case 1:
{
if(channel_delay[1]!=2)
KEY0.channel_status=channel_delay[1];
else
KEY0.channel_status^=1;


}break;
case 2:
{
if(channel_delay[1]!=2)
KEY1.channel_status=channel_delay[1];
else
KEY1.channel_status^=1;


}break;
case 4:
{
if(channel_delay[1]!=2)
KEY2.channel_status=channel_delay[1];
else
KEY2.channel_status^=1;

}break;
case 3:
{
if(channel_delay[1]!=2)
{
KEY0.channel_status=channel_delay[1];
KEY1.channel_status=channel_delay[1];
}
else
{
KEY0.channel_status^=1;
KEY1.channel_status^=1;
}
}break;
case 5:
{
if(channel_delay[1]!=2)
{
KEY0.channel_status=channel_delay[1];
KEY2.channel_status=channel_delay[1];
}
else
{
KEY0.channel_status^=1;
KEY2.channel_status^=1;
}
}break;
case 6:
{
if(channel_delay[1]!=2)
{
KEY1.channel_status=channel_delay[1];
KEY2.channel_status=channel_delay[1];
}
else
{
KEY1.channel_status^=1;
KEY2.channel_status^=1;
}
}break;
case 7:
{
if(channel_delay[1]!=2)
{
KEY0.channel_status=channel_delay[1];
KEY1.channel_status=channel_delay[1];
KEY2.channel_status=channel_delay[1];
}
else
{
KEY0.channel_status^=1;
KEY1.channel_status^=1;
KEY2.channel_status^=1;
}
}break;
}


channel_delay[0]=0;
channel_delay[1]=0;
channel_delay[2]=0;
delay_flag=0;
}
}
}
